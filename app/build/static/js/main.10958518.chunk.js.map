{"version":3,"sources":["serviceWorker.ts","model/UserModel.ts","api/client.ts","api/api.ts","api/user/userApi.ts","components/utils/FormInputModal.tsx","store/reducers/authReducer.ts","store/types.ts","store/reducers/errorReducer.ts","store/reducers/i18nReducer.ts","store/store.ts","components/utils/Error.tsx","components/utils/LoadingButton.tsx","components/auth/UserLogin.tsx","components/auth/AuthorisedRoute.tsx","components/dashboard/Dashboard.tsx","components/utils/SearchMultiSelection.tsx","components/user/UserForm.tsx","components/utils/ConfirmDialog.tsx","components/user/User.tsx","components/utils/Pagination.tsx","model/filter/master/MasterFilter.ts","model/filter/UserFilter.ts","components/utils/ThreedotsMenu.tsx","model/SurveyModel.ts","utils/string.ts","components/user/Users.tsx","components/auth/ResetPassword.tsx","components/utils/TopBar.tsx","components/user/Profile.tsx","model/PasswordChangeModel.ts","components/utils/AlertDialog.tsx","components/user/ChangePassword.tsx","model/filter/SurveyFilter.ts","api/survey/surveyApi.ts","model/QuestionModel.ts","model/OptionModel.ts","components/survey/SurveyForm.tsx","components/survey/Survey.tsx","components/survey/Surveys.tsx","components/survey/ShareSurvey.tsx","AdminApp.tsx","components/auth/ForgotPasswordRequest.tsx","PublicApp.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","UserRole","HttpMethods","UserModel","id","email","roles","firstName","lastName","fullName","phone","password","this","v4","encode","component","encodeURIComponent","JSON","stringify","getUser","a","client","get","getUsers","filter","putUser","payload","put","patchUser","patch","deleteUser","delete","changePassword","adminGeneratePassword","ElementType","Session","token","refreshToken","user","loadToken","localStorage","getItem","sess","parse","session","Authorization","setItem","set","baseUrl","replace","endpoint","headerContentType","request","GET","undefined","POST","PUT","PATCH","DELETE","find","item","ROLE_ADMIN","clear","credentials","fetch","absUrl","method","headers","body","response","ok","msg","status","Error","json","responseUser","data","statusText","responseBody","contentType","includes","message","path","sep","logout","reload","authorization","refresh","text","process","initialState","isAuthenticated","isLoggedIn","authReducer","state","action","type","statusCode","errorReducer","i18nReducer","lang","vi","en","rootReducer","combineReducers","auth","error","createStore","clearError","dispatch","setError","props","errorState","useSelector","useState","useDispatch","Alert","variant","className","onClose","dismissible","LoadingButton","loading","disabled","onClick","children","Button","Spinner","as","animation","size","role","aria-hidden","UserLogin","history","setEmail","setPassword","setLoading","useEffect","submit","e","preventDefault","login","username","url","from","push","Card","Body","Form","onSubmit","Group","Label","Control","placeholder","onChange","currentTarget","value","Nav","Link","NavLink","to","Col","md","span","offset","AuthorisedRoute","rest","pathname","Dashboard","Container","SearchMultiSelection","selected","selectedItems","setSelectedItems","isFocus","setIsFocus","isInSelection","setIsInSelection","keyword","setKeyword","currentSelectedIndex","setCurrentSelectedIndex","map","Badge","key","itemClick","length","onKeyDown","filterData","toLocaleLowerCase","indexOf","select","keyCode","navigate","Math","min","max","seletectItem","autoComplete","onBlur","target","name","onFocus","onMouseLeave","onMouseEnter","index","UserForm","validated","setValidated","isNew","setUser","Breadcrumb","Item","active","noValidate","event","checkValidity","element","Row","required","defaultValue","Object","entries","typesSelected","first","second","every","onChangeRoles","ConfirmDialog","onCloseHandle","onCancelAction","Modal","show","isDisplay","onHide","Header","closeButton","Title","confirmText","Footer","cancelText","onOkAction","okText","User","isDisplayConfirmDelete","setIsDisplayConfirmDelete","handleCloseModal","params","ButtonToolbar","PaginationFilter","page","limit","MasterFilter","pagination","sortBy","UserFilter","ThreedotsMenu","isDislay","setIsDisplay","useRef","menuList","menu","ref","icon","faEllipsisV","Overlay","current","placement","propsOver","Tooltip","k","entity","title","SurveyStatus","FormInputModal","centered","elements","label","TEXT","DATE","PASSWORD","LINK_ACTION","clickAction","round","pow","random","toString","slice","Users","users","setUsers","currentSelected","setCurrentSelected","isConfirmDelete","setIsConfirmDelete","isDisplayFormInput","setIsDisplayFormInput","isGeneratingPassword","setIsGeneratingPassword","randomPassword","setRandomPassword","menuAction","faKey","faEdit","faTrashAlt","UserList","xs","lg","Table","responsive","i","join","FbsString","exact","render","PasswordReset","success","setSuccess","failed","setFailed","resetPassword","canSubmit","href","Text","ButtonGroup","TopBar","faCaretDown","Collapse","in","ListGroup","profileId","Profile","profile","setProfile","readOnly","PasswordChangeModel","oldPassword","newPassword","newPasswordConfirm","AlertDialog","onOkHandle","onCloseAction","ChangePassword","passwordChange","setPasswordChange","isShowAlert","setIsShowAlert","SurveyFilter","getSurvey","getSurveys","putSurvey","patchSurvey","deleteSurvey","QuestionType","SurveyModel","description","note","STATUS_OPEN","questions","surveyResponses","QuestionModel","TYPE_INPUT_TEXT","survey","options","OptionModel","question","SurveyForm","setSurvey","q","handleQuestionTitleChange","TYPE_INPUT_TEXT_AREA","handleQuestionTypeChange","TYPE_INPUT_RADIO","TYPE_INPUT_CHECKBOX","TYPE_DROPDOWN_BOX","o","onAddOptionHandler","faPlus","option","oKey","handleOptionChangeLabel","handleOptionChangeValue","onRemoveOptionHandler","faMinus","faTimes","Survey","Surveys","surveys","setSurveys","isDisplayModalShare","setIsDisplayModalShare","isDisplayModalResponse","setIsDisplayModalResponse","faShareAlt","faAlignJustify","SurveyList","ShareSurvey","AdminApp","basename","Navbar","collapseOnSelect","expand","Toggle","aria-controls","ForgotPasswordRequest","resetPasswordSuccess","setResetPasswordSuccess","requestPasswordReset","PublicApp","ReactDOM","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"sLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,IChBMC,E,iFAAAA,K,sBAAAA,E,wBAAAA,E,yBAAAA,M,SCMPC,EDeUC,EALX,aAAe,yBATfC,QASc,OARdC,MAAgB,GAQF,KAPdC,MAAuB,GAOT,KANdC,UAAoB,GAMN,KALdC,SAAmB,GAKL,KAJdC,SAAmB,GAIL,KAHdC,WAGc,OAFdC,cAEc,EACVC,KAAKR,GAAKS,eEbLC,EAAS,SAACC,GACnB,OAAOC,mBAAmBC,KAAKC,UAAUH,KCDhCI,EAAO,uCAAG,WAAOf,GAAP,SAAAgB,EAAA,sEACNC,EAAOC,IAAP,gBAAoBlB,IADd,mFAAH,sDAIPmB,EAAQ,uCAAG,WAAOC,GAAP,SAAAJ,EAAA,sEACPC,EAAOC,IAAP,wBAA4BR,EAAOU,KAD5B,mFAAH,sDAIRC,EAAO,uCAAG,WAAOC,GAAP,SAAAN,EAAA,sEACNC,EAAOM,IAAP,gBAAoBD,EAAQtB,IAAMsB,GAD5B,mFAAH,sDAIPE,EAAS,uCAAG,WAAOF,GAAP,SAAAN,EAAA,sEACRC,EAAOQ,MAAP,gBAAsBH,EAAQtB,IAAMsB,GAD5B,mFAAH,sDAITI,EAAU,uCAAG,WAAOJ,GAAP,SAAAN,EAAA,sEACTC,EAAOU,OAAP,gBAAuBL,EAAQtB,KADtB,mFAAH,sDAIV4B,EAAc,uCAAG,WAAON,GAAP,SAAAN,EAAA,sEACfC,EAAOQ,MAAP,gBAAsBH,EAAQtB,GAA9B,oBAAoDsB,GADrC,mFAAH,sDAIdO,EAAqB,uCAAG,WAAOP,GAAP,SAAAN,EAAA,sEACpBC,EAAOQ,MAAP,gBAAsBH,EAAQtB,GAA9B,sBAAsDsB,GADlC,mFAAH,uD,SFtB7BxB,K,UAAAA,E,YAAAA,E,UAAAA,E,cAAAA,E,iBAAAA,M,SGFOgC,EHUNC,E,WAKF,aAAe,yBAJfC,MAAgB,GAIF,KAHdC,aAAuB,GAGT,KAFdC,KAAO,IAAInC,EAGPS,KAAK2B,Y,wDAIL,GAAIC,aAAaC,QAAQ,WAAY,CACjC,IAAMC,EAAOzB,KAAK0B,MAAMH,aAAaI,SACrChC,KAAKwB,MAAQM,EAAKN,MAClBxB,KAAKyB,aAAeK,EAAKL,aACzBzB,KAAK0B,KAAOI,EAAKJ,Q,sCAMrB,OADA1B,KAAK2B,YACE,CAACM,cAAc,UAAD,OAAYjC,KAAKwB,U,0BAGtCA,EAAeC,EAAsBC,GACrC1B,KAAKwB,MAAQA,EACbxB,KAAKyB,aAAeA,EACpBzB,KAAK0B,KAAOA,EACZE,aAAaM,QAAQ,UAAW7B,KAAKC,UAAUN,S,8BAI/CA,KAAKmC,IAAI,GAAI,GAAI,IAAI5C,O,KAiJd,M,WAzIX,WAAY6C,EAAiBJ,GAAmB,yBAHxCA,aAGuC,OAF9BI,aAE8B,EAC3CpC,KAAKoC,QAAUA,EAAQC,QAAQ,MAAO,IACtCrC,KAAKgC,QAAUA,E,yFAETM,G,0FAAkBC,E,+BAAoB,mB,SAC/BvC,KAAKwC,QAAQlD,EAAYmD,IAAKH,OAAUI,EAAWH,G,mNAEzDD,EAAkBxB,G,iFACZd,KAAKwC,QAAQlD,EAAYqD,KAAML,EAAUxB,G,oNAEhDwB,EAAkBxB,G,iFACXd,KAAKwC,QAAQlD,EAAYsD,IAAKN,EAAUxB,G,sNAE7CwB,EAAkBxB,G,iFACbd,KAAKwC,QAAQlD,EAAYuD,MAAOP,EAAUxB,G,uNAE9CwB,G,iFACItC,KAAKwC,QAAQlD,EAAYwD,OAAQR,G,kLAI9C,OAAOtD,QAAQgB,KAAKgC,QAAQR,S,gCAG5B,OAAOxB,KAAKgC,QAAQN,O,gCAGpB,IAAMA,EAAO1B,KAAKO,UAClB,OAAOmB,QAAkEgB,IAA1DhB,EAAKhC,MAAMqD,MAAK,SAAAC,GAAI,OAAIA,IAAS3D,EAAS4D,gB,+BAIzDjD,KAAKgC,QAAQkB,U,qEAELC,G,6FACeC,MAAMpD,KAAKqD,OAAO,gBAAiB,CACtDC,OAAQhE,EAAYqD,KACpBY,QAAS,CAAC,eAAgB,oBAC1BC,KAAMnD,KAAKC,UAAU6C,K,WAHnBM,E,QAKQC,G,sBACJC,EAA0B,MAApBF,EAASG,OAAiB,+BAAiC,6CACjEC,MAAM,iBAAD,OAAkBF,I,uBAEdF,EAASK,O,cAAtBA,E,OACN9D,KAAKgC,QAAQG,IAAI2B,EAAKtC,MAAOsC,EAAKrC,aAAc,IAAIlC,G,UACzBgB,EAAQ,M,QAA7BwD,E,OACN/D,KAAKgC,QAAQG,IAAI2B,EAAKtC,MAAOsC,EAAKrC,aAAcsC,EAAaC,M,4LAGtCvE,G,uFACA2D,MAAMpD,KAAKqD,OAAO,2BAA4B,CACjEC,OAAQhE,EAAYqD,KACpBY,QAAS,CAAC,eAAgB,oBAC1BC,KAAMnD,KAAKC,UAAU,CAACb,MAAOA,M,WAH3BgE,E,QAKQC,G,sBACJG,MAAM,kCAAD,OAAmCJ,EAASQ,a,oLAI3CzC,EAAezB,G,6FACRqD,MAAMpD,KAAKqD,OAAO,mBAAoB,CACzDC,OAAQhE,EAAYqD,KACpBY,QAAS,CAAC,eAAgB,oBAC1BC,KAAMnD,KAAKC,UAAU,CAACkB,MAAOA,EAAOzB,SAAUA,M,WAH5C0D,E,QAMQC,G,oBACNQ,EAAe,OACbC,EAAcV,EAASF,QAAQ7C,IAAI,mBACtByD,EAAYC,SAAS,oB,iCACfX,EAASK,O,OAA9BI,E,qBAEEG,EAAUH,GAAgBA,EAAaG,QAAUH,EAAaG,QAAUZ,EAASQ,WACjFJ,MAAM,0BAAD,OAA2BQ,I,uIAI/BC,GACX,IAAMC,EAAkB,MAAZD,EAAK,GAAa,GAAK,IACnC,MAAM,GAAN,OAAUtE,KAAKoC,SAAf,OAAyBmC,GAAzB,OAA+BD,K,oKAIRlB,MAAMpD,KAAKqD,OAAO,kBAAmB,CACxDC,OAAQhE,EAAYqD,KACpBY,QAAS,CAAC,eAAgB,qCAC1BC,KAAM,gBAAkBxD,KAAKgC,QAAQP,e,YAHnCgC,E,QAMOC,G,iCACUD,EAASK,O,cAAtBA,E,OACN9D,KAAKgC,QAAQG,IAAI2B,EAAKtC,MAAOsC,EAAKrC,aAAczB,KAAKO,W,UAC1BA,EAAQ,M,QAA7BwD,E,OACN/D,KAAKgC,QAAQG,IAAI2B,EAAKtC,MAAOsC,EAAKrC,aAAcsC,EAAaC,M,2BAClC,MAApBP,EAASG,O,iBAChB5D,KAAKwE,SACLvF,OAAOC,SAASuF,S,8BAEVZ,MAAM,uBAAD,OAAwBJ,EAASQ,a,8KAI9BX,EAAqBhB,G,oGAAkBkB,E,oCAAOd,EAAWH,E,+BAA4B,mB,SAClFa,MAAMpD,KAAKqD,OAAOf,GAAW,CAC9CgB,OAAQA,EACRC,QAAQ,2BAAKvD,KAAKgC,QAAQ0C,iBAAnB,IAAoC,eAAgBnC,IAC3DiB,KAAMnD,KAAKC,UAAUkD,K,UAGD,OANpBC,E,QAMSG,O,iCACH5D,KAAK2E,U,wBACMvB,MAAMpD,KAAKqD,OAAOf,GAAW,CAC1CgB,OAAQA,EACRC,QAAQ,2BAAKvD,KAAKgC,QAAQ0C,iBAAnB,IAAoC,eAAgBnC,IAC3DiB,KAAMnD,KAAKC,UAAUkD,K,QAHzBC,E,kBAOAS,EAAe,OACbC,EAAcV,EAASF,QAAQ7C,IAAI,mBACtByD,EAAYC,SAAS,oB,kCACfX,EAASK,O,QAA9BI,E,mCACOC,IAAeA,EAAYC,SAAS,Y,kCACtBX,EAASmB,O,QAA9BV,E,kBAGCT,EAASC,G,uBACJW,EAAUH,GAAgBA,EAAaG,QAAUH,EAAaG,QAAUZ,EAASQ,WACjFJ,MAAM,mBAAD,OAAoBQ,I,iCAG5BH,G,iHAIA,CAAcW,4BAA0C,IAAItD,GI7LrEuD,EAAe,CACjBC,gBAAiBtE,EAAOuE,cAmBbC,EAZK,WAA+C,IAA9CC,EAA6C,uDAArCJ,EAAcK,EAAuB,uCAC9D,OAAQA,EAAOC,MACX,ICbqB,gBDcjB,OAAO,2BAAIF,GAAX,IAAkBH,iBAAiB,IACvC,ICdqB,gBDerB,ICdc,SDeV,OAAO,2BAAIG,GAAX,IAAkBH,iBAAiB,IACvC,QACI,OAAOG,IEjBbJ,EAAe,CACjBO,WAAY,IACZhB,QAAS,IAoBEiB,EAZM,WAAgD,IAA/CJ,EAA8C,uDAAtCJ,EAAcK,EAAwB,uCAChE,GAAuB,KAAnBA,EAAOd,QACP,OAAO,2BAAIa,GAAX,IAAkBG,WAAY,IAAKhB,QAAS,KAEhD,OAAQc,EAAOC,MACX,IDbqB,gBCcjB,OAAO,2BAAIF,GAAX,IAAkBG,WAAY,IAAKhB,QAASc,EAAOd,UACvD,QACI,OAAOa,I,gBCAJK,EAPK,WAA8C,wDAAC,IAAxBJ,EAAuB,uCAC9D,OAAQA,EAAOK,MACX,IAAK,KAAM,OAAOC,EAClB,QAAS,OAAOC,ICXpBC,EAAcC,YAAgB,CAC9BC,KAAMZ,EACNa,MAAOR,EACPE,KAAMD,IAKKQ,cAAYJ,G,iECPdK,EAAa,SAACC,GACvBC,EAASD,EAAU,KAEVC,EAAW,SAACD,EAAeH,GACpCG,EAAS,CAACb,KJNe,gBIMMf,QAASyB,KAyB7BjC,EAlBqB,SAACsC,GACjC,IAAMC,EAAaC,aAAY,SAACnB,GAAD,OAA2BA,EAAMY,SADrB,EAEjBQ,mBAASH,EAAML,OAASM,EAAW/B,SAFlB,mBAEpCyB,EAFoC,KAE7BI,EAF6B,KAGrCD,EAAWM,cAMjB,OACI,qCAAIT,GAASM,EAAW/B,UACpB,kBAACmC,EAAA,EAAD,CAAOC,QAAS,SAAUC,UAAW,OAAQC,QAP1B,WACvBV,EAAS,CAACb,KJlBW,gBIkBUU,MAAO,KACtCI,EAAS,KAKqEU,aAAW,GAChFd,GAASM,EAAW/B,W,yCCXtBwC,GARoC,SAAC,GAA6G,IAAD,IAA3GzB,YAA2G,MAApG,SAAoG,MAA1F0B,eAA0F,aAAzEC,gBAAyE,aAAvDC,eAAuD,MAA7C,aAA6C,MAAnCP,eAAmC,MAAzB,UAAyB,EAAdQ,EAAc,EAAdA,SAC9I,OACI,kBAACC,EAAA,EAAD,CAAQ9B,KAAMA,EAAM2B,SAAUA,EAAUC,QAASA,EAASP,QAASA,GAC9DK,EAAU,kBAACK,EAAA,EAAD,CAASC,GAAI,OAAQC,UAAW,SAAUC,KAAM,KAAMC,KAAM,SAAUC,cAAa,SAAa,oCAAGP,KC2D3GQ,GA7D4D,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,QAASxI,EAAc,EAAdA,SAAc,EACtEoH,mBAAS,IAD6D,mBACzF7G,EADyF,KAClFkI,EADkF,OAEhErB,mBAAS,IAFuD,mBAEzFvG,EAFyF,KAE/E6H,EAF+E,OAGlEtB,oBAAS,GAHyD,mBAGzFQ,EAHyF,KAGhFe,EAHgF,KAI1FrC,EAAOa,aAAY,SAACnB,GAAD,OAA2BA,EAAMM,QACpDS,EAAWM,cACjBuB,qBAAU,WACNrH,EAAO+D,WACR,IAEH,IAIMuD,EAAM,uCAAG,WAAOC,GAAP,eAAAxH,EAAA,6DACXwH,EAAEC,iBACFJ,GAAW,GACX7B,EAAWC,GAHA,kBAKDxF,EAAOyH,MAAM,CAACC,SAAU1I,EAAOM,SAAUA,IALxC,OAMPkG,EAAS,CAACb,KN/BO,kBMgCbgD,EAAM,IACNlJ,GAAYA,EAASgG,OAAShG,EAASgG,MAAMmD,OAC7CD,EAAMlJ,EAASgG,MAAMmD,MAEzBX,EAAQY,KAAKF,GACbnJ,OAAOC,SAASuF,SAZT,kDAcPwB,EAAS,CAACb,KNnCO,gBMmCcf,QAASmB,EAAK,kBAC7CS,EAAS,CAACb,KNvCO,kBMwBV,QAiBXyC,GAAW,GAjBA,0DAAH,sDAoBZ,OACI,yBAAKnB,UAAW,aACZ,wBAAIA,UAAW,4BAA6BlB,EAAK,gBACjD,kBAAC+C,EAAA,EAAD,CAAM7B,UAAW,QACb,kBAAC6B,EAAA,EAAKC,KAAN,KACI,kBAACC,EAAA,EAAD,CAAMC,SAAUX,GACZ,kBAACU,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,cACA,kBAACH,EAAA,EAAKI,QAAN,CAAczD,KAAM,QAAS0D,YAAa,QAASC,SAAU,SAACf,GAAD,OAAYL,EAASK,EAAEgB,cAAcC,WAEtG,kBAACR,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,KAAapD,EAAI,UACjB,kBAACiD,EAAA,EAAKI,QAAN,CAAczD,KAAK,WAAW0D,YAAY,WAAWC,SAAU,SAACf,GAAD,OAAYJ,EAAYI,EAAEgB,cAAcC,WAE3G,kBAACR,EAAA,EAAKE,MAAN,KACI,kBAACO,EAAA,EAAIC,KAAL,CAAU/B,GAAIgC,IAASC,GAAI,4BAA6B7D,EAAK,mBAC7D,kBAAC8D,EAAA,EAAD,CAAK5C,UAAW,kBAAmB6C,GAAI,CAACC,KAAM,EAAGC,OAAQ,IACrD,kBAAC,GAAD,CAAe3C,QAASA,EAASC,UAxClD/H,QAAQS,GAASM,IAAa+G,IAwC6CtB,EAAI,c,SClD/EkE,GAP+B,SAAC,GAAyB,IAAxBxK,EAAuB,EAAvBA,SAAayK,EAAU,6BAEnE,OADkBtD,aAAY,SAACnB,GAAD,OAA2BA,EAAMW,QAEjDd,gBAAkB,kBAAC,IAAU4E,GAAW,kBAAC,IAAD,CAAUN,GAAI,CAACO,SAAU,SAAU1E,MAAO,CAACmD,KAAMnJ,EAAWA,EAAS0K,SAAW,SCc3HC,GAhBkC,SAAC,GAAqB,EAApBzK,MAAoB,EAAbsI,QAAc,IAC9DlC,EAAOa,aAAY,SAACnB,GAAD,OAA2BA,EAAMM,QAI1D,OACI,kBAACsE,EAAA,EAAD,KACI,kBAACvB,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,KACI,4BAAKhD,EAAI,a,2DCyGduE,GAtGmD,SAAC5D,GAAW,IAAD,EAC/BG,mBAA0CH,EAAM6D,UAAY,IAD7B,mBAClEC,EADkE,KACnDC,EADmD,OAGjD5D,mBAA0CH,EAAMnC,MAAQ,IAHP,mBAGlEA,EAHkE,aAI3CsC,oBAAS,IAJkC,mBAIlE6D,EAJkE,KAIzDC,EAJyD,OAK/B9D,oBAAS,GALsB,mBAKlE+D,EALkE,KAKnDC,EALmD,OAM3ChE,mBAAS,IANkC,mBAMlEiE,EANkE,KAMzDC,EANyD,OAOjBlE,oBAAU,GAPO,mBAOlEmE,EAPkE,KAO5CC,EAP4C,KAazE5C,qBAAU,WACN0C,EAAW,IACXrE,EAAM4C,SAASkB,GACfS,GAAyB,KAE1B,CAACT,IA6DJ,OACI,yBAAKvD,UAAW,oBACZ,yBAAKA,UAAW,gBACXuD,EAAcU,KAAI,SAAA3H,GAAI,OACnB,kBAAC4H,GAAA,EAAD,CAAOC,IAAK7H,EAAKxD,GAAIiH,QAAS,OAAQO,QAAS,SAACgB,GAAD,OAtCvC8C,EAsCkE9H,OArClFiH,EAAcrJ,QAAO,SAAAoC,GAAI,OAAIA,EAAKxD,KAAOsL,EAAUtL,MAAIuL,OAAS,GAChEb,EAAiBD,EAAcrJ,QAAO,SAAAoC,GAAI,OAAIA,EAAKxD,KAAOsL,EAAUtL,QAFrD,IAACsL,IAsC0E9H,EAAK4B,KACnF,0BAAM8B,UAAW,gBAAjB,YAGR,kBAAC+B,EAAA,EAAKI,QAAN,CAAcmC,UApCF,SAAChD,GACrB,IAAIiD,EAAajH,EAAKpD,QAAO,SAAAoC,GAAI,OAAKA,EAAKxD,GAAG0L,oBAAoBC,QAAQZ,EAAQW,sBAAwB,GAAsE,IAAjEjB,EAAcrJ,QAAO,SAAAwK,GAAM,OAAIA,EAAO5L,KAAOwD,EAAKxD,MAAIuL,UACrK,GAA0B,IAAtBE,EAAWF,OAIf,GAAkB,KAAd/C,EAAEqD,SAYN,GAAkB,KAAdrD,EAAEqD,SAAgC,KAAdrD,EAAEqD,QAA1B,CAGA,IAAIC,GAAY,EAEE,KAAdtD,EAAEqD,UACFC,EAAW,GAEfZ,EAAwBa,KAAKC,IAAID,KAAKE,IAAIhB,EAAuBa,EAAU,GAAIL,EAAWF,OAAS,SApBnG,CAEI,GADA/C,EAAEC,iBACEwC,EAAuBQ,EAAWF,OAAS,GAAKN,EAAuB,EACvE,OAEJ,IAAIiB,EAAeT,EAAWR,GAC2C,IAArER,EAAcrJ,QAAO,SAAAoC,GAAI,OAAIA,EAAKxD,KAAOkM,EAAalM,MAAIuL,SAC1Dd,EAAc3B,KAAKoD,GACnBxB,EAAiBD,EAAcU,KAAI,SAAA3H,GAAI,OAAIA,SAsBD2I,aAAa,MAAM1C,MAAOsB,EAASnF,KAAM,OAAQ0D,YAAa3C,EAAM2C,YAC1G8C,OApEO,WACnBlB,GAAyB,GACzBN,GAAW,IAkEyBrB,SAvDV,SAACf,GAC3B0C,GAAyB,GACzBF,EAAWxC,EAAE6D,OAAO5C,QAqDiDvC,UAAWP,EAAMO,UAC1EoF,KAAM3F,EAAM2F,KAAMC,QAhFZ,WAClB3B,GAAW,QAiFLD,GAAWE,IAAkBJ,EAAcc,OAAS/G,EAAK+G,QACvD,yBAAKrE,UAAW,cAAesF,aA/DhB,WACvB1B,GAAiB,IA8DwD2B,aAnElD,WACvB3B,GAAiB,KAmEL,4BACCtG,EAAKpD,QAAO,SAAAoC,GAAI,OAAKA,EAAKxD,GAAG0L,oBAAoBC,QAAQZ,EAAQW,sBAAwB,GAAsE,IAAjEjB,EAAcrJ,QAAO,SAAAwK,GAAM,OAAIA,EAAO5L,KAAOwD,EAAKxD,MAAIuL,UAAeJ,KAAI,SAAC3H,EAAMkJ,GAAP,OAChK,wBAAIxF,UAAWwF,IAAUzB,EAAuB,SAAW,GAAII,IAAK7H,EAAKxD,GAAIwH,QAAS,SAAAgB,GAAC,OAzDvF8C,EAyD0G9H,OAxDxD,IAAlEiH,EAAcrJ,QAAO,SAAAoC,GAAI,OAAIA,EAAKxD,KAAOsL,EAAUtL,MAAIuL,SACvDd,EAAc3B,KAAKwC,GACnBZ,EAAiBD,EAAcU,KAAI,SAAA3H,GAAI,OAAIA,QAH5B,IAAC8H,IAyDkH9H,EAAK4B,aCQpIuH,GAxG2B,SAAC,GAAyB,IAAD,MAAvBzE,EAAuB,EAAvBA,QAASxI,EAAc,EAAdA,SAC3CsG,EAAOa,aAAY,SAACnB,GAAD,OAA2BA,EAAMM,QADK,EAE7Bc,oBAAS,GAFoB,mBAExD8F,EAFwD,KAE7CC,EAF6C,OAGjC/F,oBAAS,GAHwB,mBAGxDQ,EAHwD,KAG/Ce,EAH+C,KAIzDyE,IAAQ,UAAEpN,EAASgG,aAAX,iBAAE,EAAgBxD,YAAlB,aAAE,EAAsBjC,OAJyB,EAKvC6G,oBAAoB,UAAApH,EAASgG,aAAT,eAAgBxD,OAAQ,IAAInC,GALT,mBAKxDmC,EALwD,KAKlD6K,EALkD,KAMzDtG,EAAWM,cAyCjB,OACI,oCACI,kBAACiG,GAAA,EAAD,KACI,kBAACA,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GACnB,kBAAC,IAAD,CAAMrD,GAAI,KAAV,cAEJ,kBAACmD,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GACnB,kBAAC,IAAD,CAAMrD,GAAI,SAAU7D,EAAI,QAE1B8G,GACE,kBAACE,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GACnB,kBAAC,IAAD,CAAMrD,GAAE,gBAAW3H,EAAKlC,KAAOkC,EAAK/B,UAApC,IAAgD+B,EAAK9B,WAG7D,kBAAC4M,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GACjBJ,EAAuB9G,EAAI,IAAnBA,EAAI,OAGtB,4BAAM8G,EAAuB9G,EAAI,IAAnBA,EAAI,KAAlB,IAA2CA,EAAI,MAC/C,kBAAC+C,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,KACI,kBAACC,EAAA,EAAD,CAAMkE,YAAU,EAACP,UAAWA,EAAW1D,SA5DlC,SAACkE,GAMlB,GALA/E,GAAW,GACXwE,GAAa,GACbrG,EAAWC,GACX2G,EAAM3E,kBAED2E,EAAM5D,cAAc6D,gBAGrB,OAFA3G,EAASD,EAAUT,EAAK,6BACxBqC,GAAW,GAIf,sBAAC,sBAAArH,EAAA,mEAEO8L,EAFP,gCAEqBzL,EAAQa,GAF7B,6CAE2CV,EAAUU,GAFrD,OAGOgG,EAAQY,KAAR,gBAAsB5G,EAAKlC,KAHlC,kDAKO0G,EAASD,EAAU,KAAI5B,SACvBwD,GAAW,GANlB,yDAAD,IAgD2EkB,SAAU,SAACf,GArCrE,IAAC8E,IAqCoH9E,EApCtIhC,EAAWC,GACXsG,EAAQ,2BAAI7K,GAAL,mBAAYoL,EAAQjB,OAAOC,KAAOgB,EAAQjB,OAAO5C,WAoCxC,kBAACR,EAAA,EAAKsE,IAAN,KACI,kBAACtE,EAAA,EAAKE,MAAN,CAAYvB,GAAIkC,KACZ,kBAACb,EAAA,EAAKG,MAAN,KAAapD,EAAK,eAClB,kBAACiD,EAAA,EAAKI,QAAN,CAAc8C,aAAc,MAAOqB,UAAQ,EAAClB,KAAM,YAAamB,aAAcvL,EAAK/B,aAEtF,kBAAC8I,EAAA,EAAKE,MAAN,CAAYvB,GAAIkC,KACZ,kBAACb,EAAA,EAAKG,MAAN,KAAapD,EAAK,cAClB,kBAACiD,EAAA,EAAKI,QAAN,CAAc8C,aAAc,MAAOqB,UAAQ,EAAClB,KAAM,WAAYmB,aAAcvL,EAAK9B,aAGzF,kBAAC6I,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,cACA,kBAACH,EAAA,EAAKI,QAAN,CAAc8C,aAAc,MAAOqB,UAAQ,EAAC5H,KAAM,QAAS0G,KAAM,QAASmB,aAAcvL,EAAKjC,SAEjG,kBAACgJ,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,KAAapD,EAAK,iBAClB,kBAACiD,EAAA,EAAKI,QAAN,CAAc8C,aAAc,MAAOqB,UAAQ,EAAClB,KAAM,QAASmB,aAAcvL,EAAK5B,SAElF,kBAAC2I,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,KAAapD,EAAI,MACjB,kBAAC,GAAD,CACIxB,KAAMkJ,OAAOC,QAAQ9N,GAAUsL,KAAI,SAAA3H,GAAI,MAAK,CAACxD,GAAIwD,EAAK,GAAI4B,KAAMY,EAAKxC,EAAK,IAAKiG,MAAOjG,EAAK,OAC3F8F,YAAatD,EAAI,KACjBuD,SAAU,SAACqE,IAtDjB,SAACA,EAAgD1L,GACnEsE,EAAWC,GACX,IALmBoH,EAAsBC,EAKrC5N,EAAQ0N,EAAczC,KAAI,SAAA3H,GAAI,OAAIA,EAAKiG,SAE3C,GAPmBoE,EAOD3L,EAAKhC,MAPkB4N,EAOX5N,EANvB2N,EAAME,OAAM,SAACvF,GAAD,OAAOsF,EAAOlJ,SAAS4D,OAAOsF,EAAOC,OAAM,SAACvF,GAAD,OAAOqF,EAAMjJ,SAAS4D,MAOhF,OAAO,EAEXuE,EAAQ,2BAAI7K,GAAL,IAAWhC,MAAOA,KA+C8D8N,CAAcJ,EAAe1L,IAC5FsI,SAAUtI,EAAKhC,MAAMiL,KAAI,SAAApD,GAAI,MAAK,CAAC/H,GAAI+H,EAAM3C,KAAMY,EAAK+B,GAAO0B,MAAO1B,SAG9E,kBAAC,GAAD,CAAeT,QAASA,GAAUtB,EAAI,W,UCpE/CiI,GA5BqC,SAACtH,GACjD,IAAMX,EAAOa,aAAY,SAACnB,GAAD,OAA2BA,EAAMM,QACpDkI,EAAgB,WAClBvH,EAAMwH,eAAexH,EAAMnD,OAK/B,OACI,oCACI,kBAAC4K,GAAA,EAAD,CAAOC,KAAM1H,EAAM2H,UAAWC,OAAQL,GAClC,kBAACE,GAAA,EAAMI,OAAP,CAAcC,aAAW,GACrB,kBAACL,GAAA,EAAMM,MAAP,KAAc/H,EAAMgI,aAAe3I,EAAI,UAE3C,kBAACoI,GAAA,EAAMpF,KAAP,KAAarC,EAAM9B,SACnB,kBAACuJ,GAAA,EAAMQ,OAAP,KACI,kBAAClH,EAAA,EAAD,CAAQT,QAAQ,YAAYO,QAAS0G,GAChCvH,EAAMkI,YAAc7I,EAAI,QAE7B,kBAAC0B,EAAA,EAAD,CAAQT,QAAQ,UAAUO,QAdvB,WACfb,EAAMmI,WAAWnI,EAAMnD,QAcNmD,EAAMoI,QAAU/I,EAAI,QC2C9BgJ,GArE2C,SAAC,GAAsB,IAArBpP,EAAoB,EAApBA,MAAOsI,EAAa,EAAbA,QAAa,EACpDpB,mBAAS,IAAI/G,GADuC,mBACrEmC,EADqE,KAC/D6K,EAD+D,KAEtE/G,EAAOa,aAAY,SAACnB,GAAD,OAA2BA,EAAMM,QAFkB,EAGhBc,oBAAS,GAHO,mBAGrEmI,EAHqE,KAG7CC,EAH6C,KAItEzI,EAAWM,cAEXoI,EAAmB,kBAAMD,GAA0B,IAEzD5G,qBAAU,WACN,sBAAC,4BAAAtH,EAAA,sEAC0BD,EAAQnB,EAAMwP,OAAOpP,IAD/C,OACSiE,EADT,OAEG8I,EAAQ9I,EAASO,MAFpB,0CAAD,KAID,CAAC5E,IAcJ,OACI,oCACI,kBAACoN,GAAA,EAAD,KACI,kBAACA,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GACnB,kBAAC,IAAD,CAAMrD,GAAI,KAAV,cAEJ,kBAACmD,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GACnB,kBAAC,IAAD,CAAMrD,GAAI,SAAU7D,EAAI,OAE5B,kBAACgH,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GAClBhL,EAAK/B,UADV,IACsB+B,EAAK9B,WAI/B,kBAACiP,GAAA,EAAD,CAAenI,UAAW,uBACtB,kBAACQ,EAAA,EAAD,CAAQR,UAAU,iBAAiBM,QArCvB,kBAAM0H,GAA0B,KAqCkBlJ,EAAI,OAAlE,IAA+EA,EAAI,MACnF,kBAAC,IAAD,CAAMkB,UAAU,kBAAkB2C,GAAI,CAACO,SAAS,cAAD,OAAgBlI,EAAKlC,IAAM0F,MAAO,CAACxD,KAAMA,KAAS8D,EAAI,KAArG,IAAgHA,EAAI,OAExH,4BAAK9D,EAAK/B,UAAV,IAAsB+B,EAAK9B,UAC3B,kBAAC2I,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,KACI,wBAAI9B,UAAU,OACV,wBAAIA,UAAU,YAAYlB,EAAK,aAA/B,KACA,wBAAIkB,UAAU,YAAYhF,EAAK/B,UAA/B,IAA2C+B,EAAK9B,UAChD,wBAAI8G,UAAU,YAAd,UACA,wBAAIA,UAAU,YAAYhF,EAAKjC,OAC/B,wBAAIiH,UAAU,YAAYlB,EAAK,gBAA/B,KACA,wBAAIkB,UAAU,YAAYhF,EAAK5B,OAC/B,wBAAI4G,UAAU,YAAYlB,EAAI,KAA9B,KACA,wBAAIkB,UAAU,YACThF,EAAKhC,MAAMiL,KAAI,SAAC3H,EAAM6H,GAAP,OACZ,oCAAE,kBAACD,GAAA,EAAD,CAAOC,IAAKA,EAAKpE,QAAS,QAASjB,EAAKxC,IAA1C,IAAyD,qCAM7E,kBAAC,GAAD,CAAeA,KAAMtB,EAAM2C,QAASmB,EAAI,OAAa,IAAMA,EAAI,KAAW,IAAM9D,EAAK/B,UAAY,IAAM+B,EAAK9B,SAAW,KAAMkO,UAAWW,EAAwBd,eAAgBgB,EAAkBL,WAjDhL,SAACtL,GACvB,sBAAC,sBAAAxC,EAAA,+EAEaU,EAAWQ,GAFxB,OAGOgG,EAAQY,KAAK,SAHpB,+CAKOpC,EAASD,EAAU,KAAI5B,SAL9B,uDAAD,GAQAsK,S,kBChCKG,I,OAGT,aAAoC,IAAxBC,EAAuB,uDAAhB,EAAGC,EAAa,uDAAL,IAAK,yBAFnCD,KAAO,EAE4B,KADnCC,MAAQ,IAEJhP,KAAK+O,KAAOA,EACZ/O,KAAKgP,MAAQA,ICENC,G,sCALX1E,a,OACA2E,WAAgC,IAAIJ,G,KACpCK,OAA6B,ICFlBC,G,8MAFX1P,MAAuB,G,YADFuP,I,sCC2CVI,GA5BqC,SAAClJ,GAA+B,IAAD,EAC9CG,oBAAS,GADqC,mBACxEgJ,EADwE,KAC9DC,EAD8D,KAEzE1D,EAAS2D,iBAAO,MAChBC,EAAWtJ,EAAMuJ,MAAQ,GAE/B,OAAQ,oCACHD,EAAS1E,OAAS,GACf,oCACI,yBAAKrE,UAAW,WAAYiJ,IAAK9D,EAAQ7E,QAAS,kBAAMuI,GAAcD,KAClE,kBAAC,KAAD,CAAiBM,KAAMC,QAE3B,kBAACC,GAAA,EAAD,CAASjE,OAAQA,EAAOkE,QAASlC,KAAMyB,EAAUU,UAAW,eACvD,SAACC,GAAD,OACG,kBAACC,GAAA,EAAD,eAAS1Q,GAAI,oBAAwByQ,EAArC,CAAgDjE,aAAc,SAAAhE,GAAC,OAAIuH,GAAa,MAC5E,wBAAI7I,UAAW,yBACV+I,EAAS9E,KAAI,SAAC+E,EAAMS,GAAP,OACV,wBAAIzJ,UAAW,YAAamE,IAAKsF,EAAGnJ,QAAS,WAAOuI,GAAa,GAAQG,EAAKvK,OAAOgB,EAAMiK,SAAUC,MAAOX,EAAK9K,MAAM,kBAAC,KAAD,CAAiBgL,KAAMF,EAAKE,OAAnJ,IAA6JF,EAAK9K,kB,SlB3B1LtD,K,YAAAA,E,YAAAA,E,sBAAAA,E,YAAAA,E,oBAAAA,E,cAAAA,E,oBAAAA,E,gBAAAA,E,oBAAAA,E,2BAAAA,M,KAwCZ,ImB1CYgP,GnB0FGC,GAhDuC,SAACpK,GACnD,IAAMX,EAAOa,aAAY,SAACnB,GAAD,OAA2BA,EAAMM,QACpDkI,EAAgB,WAClBvH,EAAMwH,eAAexH,EAAMnD,OAK/B,OACI,oCACI,kBAAC4K,GAAA,EAAD,CAAO4C,UAAQ,EAAC3C,KAAM1H,EAAM2H,UAAWC,OAAQL,GAC3C,kBAACE,GAAA,EAAMI,OAAP,CAAcC,aAAW,GACrB,kBAACL,GAAA,EAAMM,MAAP,KAAc/H,EAAMkK,OAAS7K,EAAK,mBAEtC,kBAACoI,GAAA,EAAMpF,KAAP,KACI,kBAACC,EAAA,EAAD,KACKtC,EAAMsK,SAAS9F,KAAI,SAAC3C,EAAqB6C,GAAtB,OAChB,kBAACpC,EAAA,EAAKE,MAAN,CAAYkC,IAAKA,GACZ7C,EAAE0I,OAAS,kBAACjI,EAAA,EAAKG,MAAN,KAAaZ,EAAE0I,OAAS,IACnC1I,EAAE5C,OAAS9D,EAAYqP,MACpB,kBAAClI,EAAA,EAAKI,QAAN,CAAcC,YAAad,EAAE0I,OAAS,GAAI/E,aAAc,MAAOqB,SAAUhF,EAAEgF,WAAY,EAAO5H,KAAM,OAAQ0G,KAAM9D,EAAE8D,KAAMpF,UAAWsB,EAAEtB,WAAa,GAAIuC,MAAOjB,EAAEiB,MAAOF,SAAU,SAAA6D,GAAK,OAAI5E,EAAEe,SAAS6D,EAAMf,OAAO5C,UAEtNjB,EAAE5C,OAAS9D,EAAYsP,MACpB,kBAACnI,EAAA,EAAKI,QAAN,CAAcC,YAAad,EAAE0I,OAAS,GAAI/E,aAAc,MAAOqB,SAAUhF,EAAEgF,WAAY,EAAO5H,KAAM,OAAQ0G,KAAM9D,EAAE8D,KAAMpF,UAAWsB,EAAEtB,WAAa,GAAIuC,MAAOjB,EAAEiB,MAAOF,SAAU,SAAA6D,GAAK,OAAI5E,EAAEe,SAAS6D,EAAMf,OAAO5C,UAEtNjB,EAAE5C,OAAS9D,EAAYuP,UACpB,kBAACpI,EAAA,EAAKI,QAAN,CAAcC,YAAad,EAAE0I,OAAS,GAAI/E,aAAc,MAAOqB,SAAUhF,EAAEgF,WAAY,EAAO5H,KAAM,WAAY0G,KAAM9D,EAAE8D,KAAMpF,UAAWsB,EAAEtB,WAAa,GAAIuC,MAAOjB,EAAEiB,MAAOF,SAAU,SAAA6D,GAAK,OAAI5E,EAAEe,SAAS6D,EAAMf,OAAO5C,UAE1NjB,EAAE5C,OAAS9D,EAAYwP,aACpB,kBAAC,IAAD,CAAMzH,GAAI,IAAKgH,MAAOrI,EAAE0I,OAAS,GAAIhK,UAAWsB,EAAEtB,WAAa,GAAIM,QAASgB,EAAE+I,aAAc/I,EAAEiB,OAASzD,EAAK,qBAMhI,kBAACoI,GAAA,EAAMQ,OAAP,KACI,kBAAClH,EAAA,EAAD,CAAQT,QAAQ,YAAYO,QAAS0G,GAChCvH,EAAMkI,YAAc7I,EAAI,QAE7B,kBAAC0B,EAAA,EAAD,CAAQT,QAAQ,UAAUO,QAlCvB,WACfb,EAAMmI,WAAWnI,EAAMnD,QAkCNmD,EAAMoI,QAAU/I,EAAI,QoBjF9B,O,iGAJiB,IAArBuF,EAAoB,uDAAX,EACZ,OAAOQ,KAAKyF,MAAOzF,KAAK0F,IAAI,GAAIlG,EAAS,GAAKQ,KAAK2F,SAAW3F,KAAK0F,IAAI,GAAIlG,IAAUoG,SAAS,IAAIC,MAAM,O,MC2KjGC,GA3J8B,SAAC,GAAsB,IAArBjS,EAAoB,EAApBA,MAAOsI,EAAa,EAAbA,QAAa,EACrCpB,mBAA2B,IADU,mBACxDgL,EADwD,KACjDC,EADiD,OAEjCjL,mBAAS,IAFwB,mBAExDiE,EAFwD,KAE/CC,EAF+C,KAGzDhF,EAAOa,aAAY,SAACnB,GAAD,OAA2BA,EAAMM,QAHK,EAKnCc,mBAAQ,2BAAkB,IAAI8I,IAAtB,IAAqC7E,QAASA,KALnB,mBAKxD3J,EALwD,aAMjB0F,mBAA2B,OANV,mBAMxDkL,EANwD,KAMvCC,EANuC,OAOjBnL,oBAAS,GAPQ,mBAOxDoL,EAPwD,KAOvCC,EAPuC,OAQXrL,oBAAS,GARE,mBAQxDsL,EARwD,KAQpCC,EARoC,OAS/BvL,mBAAS,IATsB,mBASxDvG,EATwD,KAS9C6H,EAT8C,OAUPtB,oBAAS,GAVF,mBAUxDwL,EAVwD,KAUlCC,EAVkC,OAWnBzL,mBAAiBd,EAAI,QAXF,mBAWxDwM,GAXwD,KAWxCC,GAXwC,KAYzDhM,GAAWM,cAoCX2L,GAAuC,CACzC,CAACtC,KAAMuC,KAAOvN,KAAMY,EAAK,qBAAsBL,OA5B1B,SAACiL,GACtBqB,EAAmB,eAAIrB,IACvB2B,GAAwB,KA2BxB,CAACnC,KAAMwC,KAAQxN,KAAMY,EAAI,KAAUL,OAhCpB,SAACiL,GAChB1I,EAAQY,KAAR,qBAA2B8H,EAAO5Q,IAAM,CAACkC,KAAM0O,MAgC/C,CAACR,KAAMyC,KAAYzN,KAAMY,EAAI,OAAYL,OApCxB,SAACiL,GAClBqB,EAAmB,eAAIrB,OAoD3BtI,qBAAU,WAIN,GAHA6J,GAAmB,GACnBE,GAAsB,GACtBjK,EAAY,IACY,OAApB4J,EACA,OAAIM,OACAD,GAAsB,QAG1BF,GAAmB,KAGxB,CAACH,EAAiBM,IACrBhK,qBAAU,WACNlH,EAAO2J,QAAUA,EACjB,sBAAC,4BAAA/J,EAAA,sEAC0BG,EAASC,GADnC,OACS6C,EADT,OAEG8N,EAAS9N,EAASO,MAFrB,0CAAD,KAID,CAACpD,EAAQ2J,IACZ,IAAM+H,GAAW,oCACb,kBAAC9F,GAAA,EAAD,KACI,kBAACA,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GACnB,kBAAC,IAAD,CAAMrD,GAAI,KAAV,cAEJ,kBAACmD,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GAClBlH,EAAI,OAGb,kBAACqJ,GAAA,EAAD,CAAenI,UAAW,eACtB,kBAAC,IAAD,CAAMA,UAAU,kBAAkB2C,GAAI,aAAc7D,EAAI,IAAxD,IAAkEA,EAAI,OAE1E,4BAAKA,EAAI,MACT,kBAACuH,GAAA,EAAD,KACI,kBAACzD,EAAA,EAAD,CAAKiJ,IAAE,EAACC,GAAI,CAAChJ,KAAM,EAAGC,OAAQ,IAC1B,kBAAChB,EAAA,EAAKI,QAAN,CAAczD,KAAM,OAAQ0D,YAAatD,EAAI,OAAYsG,KAAM,UAAWmB,aAAcrM,EAAO2J,QAASxB,SAAU,SAACf,GAAD,OAAYwC,EAAWxC,EAAE6D,OAAO5C,YAG1J,kBAACV,EAAA,EAAD,KACI,kBAACkK,GAAA,EAAD,CAAOC,YAAU,GACb,+BACI,4BACK,CAAC,QAASlN,EAAI,KAAU,IAAImF,KAAI,SAAC3H,EAAM6H,GAAP,OAAe,wBAAIA,IAAKA,GAAM7H,QAGvE,+BACKsO,EAAM3G,KAAI,SAAC3H,EAAM6H,GAAP,OACP,wBAAIA,IAAKA,GACL,4BAAI,kBAAC,IAAD,CAAMxB,GAAE,UAAKjK,EAAMgJ,IAAX,YAAkBpF,EAAKxD,KAAOwD,EAAKvD,QAC/C,4BAAI,8BAAOuD,EAAKtD,MAAMiL,KAAI,SAAAgI,GAAC,OAAInN,EAAKmN,MAAIC,KAAK,QAC7C,4BAAI,kBAAC,GAAD,CAAelD,KAAMwC,GAAY9B,OAAQpN,YAMjE,kBAAC,GAAD,CAAeqB,QAASmB,EAAI,OAAa,IAAMA,EAAI,KAAW,KAAtC,OAA4CgM,QAA5C,IAA4CA,OAA5C,EAA4CA,EAAiB7R,WAAY,KAAzE,OAA+E6R,QAA/E,IAA+EA,OAA/E,EAA+EA,EAAiB5R,UAAW,KAAMkO,UAAW4D,EAAiB/D,eA5DnJ,SAAC3K,GACnByO,EAAmB,OA2DiLnD,WAtEtL,SAACtL,GACF,OAATA,GAGJ,sBAAC,sBAAAxC,EAAA,sEACSU,EAAW8B,GADpB,OAEGuO,EAASD,EAAM1Q,QAAO,SAAA+R,GAAC,OAAIA,EAAEnT,KAAOwD,EAAKxD,OACzCiS,EAAmB,MAHtB,0CAAD,IAkE2NzO,KAAMwO,IACjO,kBAAC,GAAD,CAAgBxO,KAAMwO,EAAiBnB,MAAO7K,EAAK,qBAAsBiL,SAAU,CAC/E,CACIxH,MAAOlJ,EACPqF,KAAM9D,EAAYuP,SAClB/E,KAAM,oBACN/C,SA1Fa,SAACE,GACtBrB,EAAYqB,KA2FR,CACIA,MAAO+I,GACP5M,KAAM9D,EAAYwP,YAClBhF,KAAM,yBACN/C,SAAU,aACVgI,YA9FiB,WACzB,IAAMhR,EAAW8S,GAAU3B,OAAO,GAClCtJ,EAAY7H,GACZkS,GAAkBlS,MA8Ff+N,UAAW8D,EAAoBjE,eAAgB,SAAC3K,GAAD,OAAe6O,GAAsB,IAAQvD,WAlHnE,WAC5B,sBAAC,sBAAA9N,EAAA,+EAEaa,EAAsB,CACxB,UAAMmQ,QAAN,IAAMA,OAAN,EAAMA,EAAiBhS,GACvB,SAAYO,IAJvB,OAMOd,OAAOC,SAASuF,SANvB,+CAQOyB,EAASD,GAAU,KAAI5B,SAR9B,OAUGwN,GAAsB,GAVzB,wDAAD,OAoHJ,OACI,6BACI,kBAAC,IAAD,CAAOiB,OAAK,EAACxO,KAAMlF,EAAMkF,KAAMyO,OAAQ,kBAAMT,MAC7C,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOhO,KAAI,UAAKlF,EAAMkF,KAAX,QAAuBnE,UAAWgM,KAC7C,kBAAC,IAAD,CAAO7H,KAAI,UAAKlF,EAAMkF,KAAX,aAA4BnE,UAAWgM,KAClD,kBAAC,IAAD,CAAO7H,KAAI,UAAKlF,EAAMkF,KAAX,QAAuBnE,UAAWqO,Q,UChG9CwE,GA5DuD,SAAC,GAAqB,EAApBtL,QAAqB,IAAZtI,EAAW,EAAXA,MACvEoG,EAAOa,aAAY,SAACnB,GAAD,OAA2BA,EAAMM,QAD8B,EAExDc,mBAAS,IAF+C,mBAEjFvG,EAFiF,KAEvE6H,EAFuE,OAG1DtB,oBAAS,GAHiD,mBAGjFQ,EAHiF,KAGxEe,EAHwE,OAI1DvB,oBAAS,GAJiD,mBAIjF2M,EAJiF,KAIxEC,EAJwE,OAK5D5M,oBAAS,GALmD,mBAKjF6M,EALiF,KAKzEC,EALyE,KAMlFnN,EAAWM,cAEjBuB,qBAAU,WACNrH,EAAO+D,WACR,IAEH,IAAMuD,EAAM,uCAAG,WAAOC,GAAP,SAAAxH,EAAA,6DACXwH,EAAEC,iBACFJ,GAAW,GACX5B,EAAS,CAACb,KpBtBW,gBoBsBUU,MAAO,KACtCsN,GAAU,GAJC,kBAMD3S,EAAO4S,cAAcjU,EAAMwP,OAAOpN,MAAOzB,GANxC,OAOPmT,GAAW,GAPJ,kDASPjN,EAAS,CAACb,KpB5BO,gBoB4BcU,MAAO,KAAIzB,UAC1C+O,GAAU,GAVH,QAYXvL,GAAW,GAZA,0DAAH,sDAeNyL,EAAY,WACd,OAAOvT,EAASgL,QAAU,IAAMjE,GAGpC,OACI,yBAAKJ,UAAW,aACZ,wBAAIA,UAAW,eAAgBlB,EAAK,mBACpC,kBAAC+C,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,KACKyK,GAAW,2BAAIzN,EAAK,0BAAT,IAAoC,uBAAG+N,KAAM,UAAW/N,EAAK,gBACvEyN,GAAW,kBAACxK,EAAA,EAAD,CAAMC,SAAUX,GACzB,kBAACU,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,KAAapD,EAAI,UACjB,kBAACiD,EAAA,EAAKI,QAAN,CAAczD,KAAK,WAAW0D,YAAatD,EAAK,gBAAiBuD,SAAU,SAACf,GAAD,OAAYJ,EAAYI,EAAEgB,cAAcC,WACjHqK,KAAe,kBAAC7K,EAAA,EAAK+K,KAAN,KAAYhO,EAAK,sBAEtC,kBAACiD,EAAA,EAAKE,MAAN,KACI,kBAACkG,GAAA,EAAD,KACI,kBAAC4E,GAAA,EAAD,KACI,kBAAC,GAAD,CAAe3M,QAASA,EAASC,UAAWuM,KAAc9N,EAAI,QAEjE2N,GAAU,kBAACM,GAAA,EAAD,KACP,kBAACvK,EAAA,EAAIC,KAAL,CAAU/B,GAAIgC,IAASC,GAAI,UAAW7D,EAAI,e,mBCtB/DkO,GA9BU,WAAO,IAAD,EACrBlO,EAAOa,aAAY,SAACnB,GAAD,OAA2BA,EAAMM,QAD/B,EAEOc,oBAAS,GAFhB,mBAEpBwH,EAFoB,KAETyB,EAFS,KAM3B,OACI,4BAAQ7I,UAAW,mCACf,kBAACqG,GAAA,EAAD,CAAKf,aAAc,SAAChE,GAJxBuH,GAAa,KAKL,kBAACjG,EAAA,EAAD,CAAKiJ,IAAE,EAACC,GAAI,CAAChJ,KAAM,EAAGC,OAAQ,IAC1B,yBAAK/C,UAAW,cACZ,kBAACqG,GAAA,EAAD,KACI,kBAACzD,EAAA,EAAD,CAAKiJ,IAAE,EAACC,GAAI,CAAChJ,KAAM,EAAGC,OAAQ,GAAI/C,UAAW,sBACzC,kBAAC,IAAD,CAAM2C,GAAI,IAAK3C,UAAW,6BAA8BM,QAAS,SAAAgB,GAAC,OAAIuH,GAAczB,KAApF,KAAkG,UAAArN,EAAOF,iBAAP,eAAkBd,QAAS,GAA7H,IAAiI,kBAAC,KAAD,CAAiBmQ,KAAM+D,QACxJ,kBAACC,GAAA,EAAD,CAAUC,GAAI/F,GACV,kBAACgG,GAAA,EAAD,CAAWpN,UAAW,kBAClB,kBAACoN,GAAA,EAAUrH,KAAX,KAAgB,kBAAC,IAAD,CAAMpD,GAAI,CAACO,SAAS,WAAa1E,MAAO,CAAC6O,UAAWtT,EAAOF,UAAUf,MAAOgG,EAAI,UAChG,kBAACsO,GAAA,EAAUrH,KAAX,KAAgB,kBAAC,IAAD,CAAMpD,GAAI,CAACO,SAAS,mBAAqB1E,MAAO,CAAC6O,UAAWtT,EAAOF,UAAUf,MAAOgG,EAAK,qBACzG,kBAACsO,GAAA,EAAUrH,KAAX,KAAgB,kBAAC,IAAD,CAAMpD,GAAI,UAAW7D,EAAI,kBC0FlEwO,GAnG6B,SAAC,GAAwB,EAAvBtM,QAAwB,IAAfxI,EAAc,EAAdA,SAC7CsG,EAAOa,aAAY,SAACnB,GAAD,OAA2BA,EAAMM,QADO,EAE/Bc,oBAAS,GAFsB,mBAE1D8F,EAF0D,KAE/CC,EAF+C,KAG3DpG,EAAWM,cAHgD,EAInCD,mBAAS,IAAI/G,GAJsB,mBAI1D0U,EAJ0D,KAIjDC,EAJiD,OAKb5N,oBAAS,GALI,mBAK1DsL,EAL0D,KAKtCC,EALsC,KAOjE/J,qBAAU,WACN,sBAAC,4BAAAtH,EAAA,sEAC0BD,EAAQrB,EAASgG,MAAM6O,WADjD,OACStQ,EADT,OAEGyQ,EAAWzQ,EAASO,MAFvB,0CAAD,KAKD,IAwCH,OACI,oCACI,kBAACwI,GAAA,EAAD,KACI,kBAACA,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GACnB,kBAAC,IAAD,CAAMrD,GAAI,KAAV,cAEJ,kBAACmD,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GACnB,kBAAC,IAAD,CAAMrD,GAAI,SAAU7D,EAAI,OAE5B,kBAACgH,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GAClBlH,EAAI,UAGb,4BAAKA,EAAI,SACT,kBAAC+C,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,KACI,kBAACC,EAAA,EAAD,CAAMkE,YAAU,EAACP,UAAWA,EAAW1D,SAtDlC,SAACkE,GAClBP,GAAa,GACbrG,EAAWC,GACX2G,EAAM3E,iBAED2E,EAAM5D,cAAc6D,gBAKzBgF,GAAsB,GAJlB3L,EAASD,EAAUT,EAAK,yBAgD+CuD,SAAU,SAACf,GAzBrE,IAAC8E,IAyBoH9E,EAxBtIhC,EAAWC,GACXiO,EAAW,2BAAID,GAAL,mBAAenH,EAAQjB,OAAOC,KAAOgB,EAAQjB,OAAO5C,WAwB9C,kBAACR,EAAA,EAAKsE,IAAN,KACI,kBAACtE,EAAA,EAAKE,MAAN,CAAYvB,GAAIkC,KACZ,kBAACb,EAAA,EAAKG,MAAN,KAAapD,EAAK,eAClB,kBAACiD,EAAA,EAAKI,QAAN,CAAc8C,aAAc,MAAOqB,UAAQ,EAAClB,KAAM,YAAamB,aAAcgH,EAAQtU,aAEzF,kBAAC8I,EAAA,EAAKE,MAAN,CAAYvB,GAAIkC,KACZ,kBAACb,EAAA,EAAKG,MAAN,KAAapD,EAAK,cAClB,kBAACiD,EAAA,EAAKI,QAAN,CAAc8C,aAAc,MAAOqB,UAAQ,EAAClB,KAAM,WAAYmB,aAAcgH,EAAQrU,aAG5F,kBAAC6I,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,cACA,kBAACH,EAAA,EAAKI,QAAN,CAAc8C,aAAc,MAAOwI,UAAQ,EAAC/O,KAAM,QAAS0G,KAAM,QAASmB,aAAcgH,EAAQxU,SAEpG,kBAACgJ,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,KAAapD,EAAK,iBAClB,kBAACiD,EAAA,EAAKI,QAAN,CAAc8C,aAAc,MAAOqB,UAAQ,EAAClB,KAAM,QAASmB,aAAcgH,EAAQnU,SAErF,kBAAC,GAAD,CAAegH,SAAS,GAAQtB,EAAI,SAIhD,kBAAC,GAAD,CAAgBxC,KAAMiR,EAAS5D,MAAO7K,EAAK,oBAAqBiL,SAAU,CAAC,CACvExH,MAAOgL,EAAQlU,UAAY,GAAIiN,UAAU,EAAM5H,KAAM9D,EAAYuP,SAAU/E,KAAM,sBAAuB/C,SA5C3F,SAACE,GACtBiL,EAAW,2BAAID,GAAL,IAAclU,SAAUkJ,QA4C1B6E,UAAW8D,EAAoBjE,eAAgB,SAAC3K,GAAD,OAAe6O,GAAsB,IAAQvD,WAlE3E,SAACtL,GAC1B6O,GAAsB,GACjBoC,EAAQlU,UAAiC,KAArBkU,EAAQlU,SAIjC,sBAAC,sBAAAS,EAAA,+EAEaQ,EAAUiT,GAFvB,OAGOhV,OAAOC,SAASuF,SAHvB,+CAKOyB,EAASD,EAAU,KAAI5B,SAL9B,uDAAD,GAHI6B,EAASD,EAAUT,EAAK,2BCzCrB4O,G,sCANX5U,GAAa,G,KACb6U,YAAsB,G,KACtBC,YAAsB,G,KACtBC,mBAA6B,ICkClBC,GAvBiC,SAACrO,GAC7C,IAAMX,EAAOa,aAAY,SAACnB,GAAD,OAA2BA,EAAMM,QAEpDiP,EAAa,WACftO,EAAMuO,cAAcvO,EAAMnD,OAE9B,OACI,oCACI,kBAAC4K,GAAA,EAAD,CAAOC,KAAM1H,EAAM2H,UAAWC,OAAQ0G,GAClC,kBAAC7G,GAAA,EAAMI,OAAP,CAAcC,aAAW,GACrB,kBAACL,GAAA,EAAMM,MAAP,KAAc/H,EAAMkK,OAAS7K,EAAI,UAErC,kBAACoI,GAAA,EAAMpF,KAAP,KAAarC,EAAM9B,SACnB,kBAACuJ,GAAA,EAAMQ,OAAP,KACI,kBAAClH,EAAA,EAAD,CAAQT,QAAQ,UAAUO,QAASyN,GAC9BtO,EAAMoI,QAAU/I,EAAI,QC+E9BmP,GA7F2C,SAAC,GAAyB,IAAxBjN,EAAuB,EAAvBA,QAASxI,EAAc,EAAdA,SAC3DsG,EAAOa,aAAY,SAACnB,GAAD,OAA2BA,EAAMM,QADqB,EAE7Cc,oBAAS,GAFoC,mBAExE8F,EAFwE,KAE7DC,EAF6D,OAGnC/F,mBAAS,IAAI8N,IAHsB,mBAGxEQ,EAHwE,KAGxDC,EAHwD,OAIjDvO,oBAAS,GAJwC,mBAIxEQ,EAJwE,KAI/De,EAJ+D,OAKzCvB,oBAAS,GALgC,mBAKxEwO,EALwE,KAK3DC,EAL2D,KAMzE9O,EAAWM,cAEjBuB,qBAAU,WACN+M,EAAkB,2BAAID,GAAL,IAAqBpV,GAAIN,EAASgG,MAAM6O,eAE1D,IAyCH,OACI,oCACI,kBAACvH,GAAA,EAAD,KACI,kBAACA,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GACnB,kBAAC,IAAD,CAAMrD,GAAI,KAAV,cAEJ,kBAACmD,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GACnB,kBAAC,IAAD,CAAMrD,GAAI,SAAU7D,EAAI,OAE5B,kBAACgH,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GAClBlH,EAAK,qBAGd,4BAAKA,EAAK,oBACV,kBAAC+C,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,KACI,kBAACC,EAAA,EAAD,CAAMkE,YAAU,EAACP,UAAWA,EAAW1D,SAlDlC,SAACkE,GAMlB,OALA/E,GAAW,GACXwE,GAAa,GACbrG,EAAWC,GACX2G,EAAM3E,iBAED2E,EAAM5D,cAAc6D,gBAKtB+H,EAAeN,cAAgBM,EAAeL,oBAC7CrO,EAASD,EAAUT,EAAK,oCACxBqC,GAAW,SAIf,sBAAC,sBAAArH,EAAA,+EAEaY,EAAewT,GAF5B,OAGO/M,GAAW,GACXkN,GAAe,GAJtB,gDAMO7O,EAASD,EAAU,KAAI5B,SACvBwD,GAAW,GAPlB,wDAAD,IAVI3B,EAASD,EAAUT,EAAK,6BACxBqC,GAAW,KA0C4DkB,SAAU,SAACf,GAvDrE,IAAC8E,IAuDoH9E,EAtDtIhC,EAAWC,GACX4O,EAAkB,2BAAID,GAAL,mBAAsB9H,EAAQjB,OAAOC,KAAOgB,EAAQjB,OAAO5C,WAsD5D,kBAACR,EAAA,EAAKsE,IAAN,KACI,kBAACtE,EAAA,EAAKE,MAAN,CAAYvB,GAAIkC,KACZ,kBAACb,EAAA,EAAKG,MAAN,KAAapD,EAAK,iBAClB,kBAACiD,EAAA,EAAKI,QAAN,CAAc8C,aAAc,MAAOqB,UAAQ,EAAClB,KAAM,cAAe1G,KAAM,WAAY6H,aAAc,MAErG,kBAACxE,EAAA,EAAKE,MAAN,CAAYvB,GAAIkC,KACZ,kBAACb,EAAA,EAAKG,MAAN,KAAapD,EAAK,iBAClB,kBAACiD,EAAA,EAAKI,QAAN,CAAc8C,aAAc,MAAOqB,UAAQ,EAAClB,KAAM,cAAe1G,KAAM,WAAY6H,aAAc,OAGzG,kBAACxE,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,KAAapD,EAAI,QAAc,IAAMA,EAAK,gBAAkB,IAAMA,EAAI,OACtE,kBAACiD,EAAA,EAAKI,QAAN,CAAc8C,aAAc,MAAOqB,UAAQ,EAAC5H,KAAM,WAAY0G,KAAM,qBAAsBmB,aAAc,MAE5G,kBAAC,GAAD,CAAenG,QAASA,GAAUtB,EAAI,SAIlD,kBAAC,GAAD,CAAaxC,KAAM4R,EAAgBvQ,QAASmB,EAAK,+BAAiC,IAAMA,EAAI,OAAY6K,MAAO7K,EAAK,2BAA4BsI,UAAWgH,EAAaJ,cAxCrJ,WACvBK,GAAe,GACfrN,EAAQY,KAAK,eC7DN0M,G,8HAFY/F,ICGdgG,GAAS,uCAAG,WAAOzV,GAAP,SAAAgB,EAAA,sEACRC,EAAOC,IAAP,kBAAsBlB,IADd,mFAAH,sDAIT0V,GAAU,uCAAG,WAAOtU,GAAP,SAAAJ,EAAA,sEACTC,EAAOC,IAAP,0BAA8BR,EAAOU,KAD5B,mFAAH,sDAIVuU,GAAS,uCAAG,WAAOrU,GAAP,SAAAN,EAAA,sEACRC,EAAOM,IAAP,kBAAsBD,EAAQtB,IAAMsB,GAD5B,mFAAH,sDAITsU,GAAW,uCAAG,WAAOtU,GAAP,SAAAN,EAAA,sEACVC,EAAOQ,MAAP,kBAAwBH,EAAQtB,IAAMsB,GAD5B,mFAAH,sDAIXuU,GAAY,uCAAG,WAAOvU,GAAP,SAAAN,EAAA,sEACXC,EAAOU,OAAP,kBAAyBL,EAAQtB,KADtB,mFAAH,uD,SVjBb8Q,K,0BAAAA,E,+BAAAA,Q,SWAAgF,GXmBGC,GALX,aAAe,yBARf/V,QAQc,OAPdC,MAAgB,GAOF,KANd4Q,MAAgB,GAMF,KALdmF,YAAsB,GAKR,KAJdC,KAAe,GAID,KAHd7R,OAAiB0M,GAAaoF,YAGhB,KAFdC,UAAkC,GAEpB,KADdC,gBAA8C,GAE1C5V,KAAKR,GAAKS,gB,SWfNqV,K,kCAAAA,E,oCAAAA,E,0CAAAA,E,sCAAAA,E,6CAAAA,Q,SAqBGO,GALX,aAAe,yBARfrW,QAQc,OAPdkR,MAAgB,GAOF,KANdtL,KAAekQ,GAAaQ,gBAMd,KALdC,YAKc,OAJdC,QAA8B,GAIhB,KAHdP,KAAe,GAIXzV,KAAKR,GAAKS,eCPHgW,GALX,aAAe,yBALfzW,QAKc,OAJdoF,KAAe,GAID,KAHdqE,MAAgB,GAGF,KAFdiN,cAEc,EACVlW,KAAKR,GAAKS,eC2MHkW,GAjM+B,SAAC,GAAyB,IAAD,MAAvBzO,EAAuB,EAAvBA,QAASxI,EAAc,EAAdA,SAC/CsG,EAAOa,aAAY,SAACnB,GAAD,OAA2BA,EAAMM,QADS,EAEjCc,oBAAS,GAFwB,mBAE5D8F,EAF4D,KAEjDC,EAFiD,OAGrC/F,oBAAS,GAH4B,mBAG5DQ,EAH4D,KAGnDe,EAHmD,KAI7DyE,IAAQ,UAAEpN,EAASgG,aAAX,iBAAE,EAAgB6Q,cAAlB,aAAE,EAAwBtW,OAJ2B,EAKvC6G,oBAAsB,UAAApH,EAASgG,aAAT,eAAgB6Q,SAAU,IAAIR,IALb,mBAK5DQ,EAL4D,KAKpDK,EALoD,KAM7DnQ,EAAWM,cA2EjB,OACI,oCACI,kBAACiG,GAAA,EAAD,KACI,kBAACA,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GACnB,kBAAC,IAAD,CAAMrD,GAAI,KAAV,cAEJ,kBAACmD,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GACnB,kBAAC,IAAD,CAAMrD,GAAI,WAAY7D,EAAI,UAE5B8G,GACE,kBAACE,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GACnB,kBAAC,IAAD,CAAMrD,GAAE,kBAAa0M,EAAOvW,KAAOuW,EAAOvW,KAGlD,kBAACgN,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GACjBJ,EAAuB9G,EAAI,IAAnBA,EAAI,OAGtB,4BAAM8G,EAAuB9G,EAAI,IAAnBA,EAAI,KAAlB,IAA2CA,EAAI,MAC/C,kBAAC+C,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,KACI,kBAACC,EAAA,EAAD,CAAMkE,YAAU,EAACP,UAAWA,EAAW1D,SA9FlC,SAACkE,GAMlB,GALA/E,GAAW,GACXwE,GAAa,GACbrG,EAAWC,GACX2G,EAAM3E,kBAED2E,EAAM5D,cAAc6D,gBAGrB,OAFA3G,EAASD,EAAUT,EAAK,6BACxBqC,GAAW,GAGf,sBAAC,sBAAArH,EAAA,mEAEO8L,EAFP,gCAEqB6I,GAAUY,GAF/B,6CAE+CX,GAAYW,GAF3D,OAGOrO,EAAQY,KAAR,kBAAwByN,EAAOvW,KAHtC,kDAKO0G,EAASD,EAAU,KAAI5B,SACvBwD,GAAW,GANlB,yDAAD,KAoFgB,kBAACY,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,cACA,kBAACH,EAAA,EAAKI,QAAN,CAAc8C,aAAc,MAAOqB,UAAQ,EAAC5H,KAAM,QAAS0G,KAAM,QAAS/C,SA3ExE,SAACf,GACvBhC,EAAWC,GACXmQ,EAAU,2BAAIL,GAAL,IAAatW,MAAOuI,EAAE6D,OAAO5C,UAyEqFgE,aAAc8I,EAAOtW,SAEhI,kBAACgJ,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,KAAapD,EAAK,iBAClB,kBAACiD,EAAA,EAAKI,QAAN,CAAc8C,aAAc,MAAOqB,UAAQ,EAAC5H,KAAM,OAAQ0G,KAAM,QAAS/C,SA3EvE,SAACf,GACvBhC,EAAWC,GACXmQ,EAAU,2BAAIL,GAAL,IAAa1F,MAAOrI,EAAE6D,OAAO5C,UAyEoFgE,aAAc8I,EAAO1F,SAE/H,kBAAC5H,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,KAAapD,EAAK,uBAClB,kBAACiD,EAAA,EAAKI,QAAN,CAAczB,GAAI,WAAYuE,aAAc,MAAOG,KAAM,cAAe/C,SA3EhE,SAACf,GAC7BhC,EAAWC,GACXmQ,EAAU,2BAAIL,GAAL,IAAaP,YAAaxN,EAAE6D,OAAO5C,UAyEmFgE,aAAc8I,EAAOP,eAEpI,kBAAC/M,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,KAAapD,EAAK,gBAClB,kBAACiD,EAAA,EAAKI,QAAN,CAAczB,GAAI,WAAYuE,aAAc,MAAOG,KAAM,OAAQ/C,SA3EhE,SAACf,GACtBhC,EAAWC,GACXmQ,EAAU,2BAAIL,GAAL,IAAaN,KAAMzN,EAAE6D,OAAO5C,UAyE4EgE,aAAc8I,EAAON,QAEtH,kBAAChN,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,KAAapD,EAAK,oBAClB,kBAAC+C,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,YACKuN,QADL,IACKA,OADL,EACKA,EAAQJ,UAAUhL,KAAI,SAAC0L,EAAGlG,GACvB,OACI,kBAACpD,GAAA,EAAD,CAAKlC,IAAKsF,GACN,kBAAC7G,EAAA,EAAD,CAAKiJ,GAAI,GACL,kBAAC9J,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,KAAapD,EAAK,mBAClB,kBAACiD,EAAA,EAAKI,QAAN,CAAc8C,aAAc,MAAOqB,UAAQ,EAAC5H,KAAM,OAAQ0G,KAAM,UAAW7C,MAAOoN,EAAE3F,MAAO3H,SAAU,SAACf,GAAD,OAvEvH,SAACqO,EAAkBrO,GACjDqO,EAAE3F,MAAQ1I,EAAE6D,OAAO5C,MACnBmN,EAAU,eAAIL,IAqEmJO,CAA0BD,EAAGrO,OAElJ,kBAACS,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,KAAapD,EAAK,kBAClB,kBAACiD,EAAA,EAAKI,QAAN,CAAczB,GAAI,SAAUuE,aAAc,MAAOqB,UAAQ,EAAClB,KAAM,SAAU7C,MAAOoN,EAAEjR,KAAM2D,SAAU,SAACf,GAAD,OAvEtH,SAACqO,EAAkBrO,GAChDqO,EAAEjR,KAAO4C,EAAE6D,OAAO5C,MACdoN,EAAEjR,OAASkQ,GAAaQ,iBAAmBO,EAAEjR,OAASkQ,GAAaiB,uBACnEF,EAAEL,QAAU,IAEhBI,EAAU,eAAIL,IAkEiJS,CAAyBH,EAAGrO,KACtI,CAACsN,GAAaQ,gBAAiBR,GAAamB,iBAAkBnB,GAAaoB,oBAAqBpB,GAAaqB,kBAAmBrB,GAAaiB,sBAAsB5L,KAAI,SAACiM,EAAGlT,GACxK,OACI,4BAAQuF,MAAO2N,EAAG/L,IAAKnH,GAAK8B,EAAKoR,UAK/CP,EAAEjR,OAASkQ,GAAaqB,mBACtBN,EAAEjR,OAASkQ,GAAaoB,qBACxBL,EAAEjR,OAASkQ,GAAamB,mBACxB,kBAAChO,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,KAAapD,EAAK,mBAAlB,IAAsC,0BAAMkB,UAAW,sBAAuBM,QAAS,SAACgB,GAAD,OA3FpH,SAACqO,GACxBA,EAAEL,QAAQ1N,KAAK,IAAI2N,IACnBG,EAAU,eAAIL,IAyFyIc,CAAmBR,KAAI,kBAAC,KAAD,CAAiBzG,KAAMkH,SAEhJT,EAAEL,QAAQrL,KAAI,SAACoM,EAAQC,GACpB,OACI,kBAACjK,GAAA,EAAD,CAAKlC,IAAKmM,GACN,kBAAC1N,EAAA,EAAD,CAAKiJ,GAAI,GACL,kBAAC9J,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,KAAapD,EAAK,iBAClB,kBAACiD,EAAA,EAAKI,QAAN,CAAczD,KAAM,OAAQuG,aAAc,MAAO1C,MAAO8N,EAAOnS,KAAMmE,SAAU,SAACf,GAAD,OApF3H,SAAC4O,EAAgB5O,GAC7C4O,EAAEhS,KAAOoD,EAAE6D,OAAO5C,MAClBmN,EAAU,eAAIL,IAkFqJkB,CAAwBF,EAAQ/O,QAGnI,kBAACsB,EAAA,EAAD,CAAKiJ,GAAI,GACL,kBAAC9J,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,MAAN,KAAapD,EAAK,iBAClB,kBAACiD,EAAA,EAAKI,QAAN,CAAczD,KAAM,OAAQuG,aAAc,MAAO1C,MAAO8N,EAAO9N,MAAOF,SAAU,SAACf,GAAD,OAtF5H,SAAC4O,EAAgB5O,GAC7C4O,EAAE3N,MAAQjB,EAAE6D,OAAO5C,MACnBmN,EAAU,eAAIL,IAoFsJmB,CAAwBH,EAAQ/O,QAGpI,kBAACsB,EAAA,EAAD,CAAKiJ,GAAI,GACL,kBAAC9J,EAAA,EAAKE,MAAN,KACI,0BAAMjC,UAAW,qBAAsBM,QAAS,SAACgB,GAAD,OAvF9F,SAACxI,EAAY6W,GACvCA,EAAEL,QAAUK,EAAEL,QAAQpV,QAAO,SAAA+R,GAAC,OAAIA,EAAEnT,KAAOA,KAC3C4W,EAAU,eAAIL,IAqFsHoB,CAAsBJ,EAAOvX,GAAI6W,KAAI,kBAAC,KAAD,CAAiBzG,KAAMwH,gBASxJ,kBAAC9N,EAAA,EAAD,CAAKiJ,GAAI,GACL,0BAAM7L,UAAW,qBAAsBM,QAAS,SAACgB,GAAD,OA5H/DxI,EA4HmG6W,EAAE7W,GA3HlIuW,EAAOJ,UAAYI,EAAOJ,UAAU/U,QAAO,SAAA+R,GAAC,OAAIA,EAAEnT,KAAOA,UACzD4W,EAAU,eAAIL,IAFc,IAACvW,IA4H0G,kBAAC,KAAD,CAAiBoQ,KAAMyH,aAKlI,yBAAK3Q,UAAW,cACZ,kBAACQ,EAAA,EAAD,CAAQR,UAAW,cAAeM,QAtIzC,SAACgB,GAC1B+N,EAAOJ,UAAUrN,KAAK,IAAIuN,IAC1BO,EAAU,eAAIL,MAoImF,kBAAC,KAAD,CAAiBnG,KAAMkH,YAKxG,kBAAC,GAAD,CAAehQ,QAASA,GAAUtB,EAAI,WCnH/C8R,GA/E6C,SAAC,GAAsB,IAAD,EAApBlY,EAAoB,EAApBA,MAAOsI,EAAa,EAAbA,QAAa,EAClDpB,mBAAS,IAAIiP,IADqC,mBACvEQ,EADuE,KAC/DK,EAD+D,KAExE5Q,EAAOa,aAAY,SAACnB,GAAD,OAA2BA,EAAMM,QAFoB,EAGlBc,oBAAS,GAHS,mBAGvEmI,EAHuE,KAG/CC,EAH+C,KAIxEzI,EAAWM,cAEXoI,EAAmB,kBAAMD,GAA0B,IAEzD5G,qBAAU,WACN,sBAAC,4BAAAtH,EAAA,sEAC0ByU,GAAU7V,EAAMwP,OAAOpP,IADjD,OACSiE,EADT,OAEG2S,EAAU3S,EAASO,MAFtB,0CAAD,KAID,CAAC5E,IAcJ,OACI,oCACI,kBAACoN,GAAA,EAAD,KACI,kBAACA,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GACnB,kBAAC,IAAD,CAAMrD,GAAI,KAAV,cAEJ,kBAACmD,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GACnB,kBAAC,IAAD,CAAMrD,GAAI,WAAY7D,EAAI,SAE9B,kBAACgH,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GAClBqJ,EAAO1F,QAIhB,kBAACxB,GAAA,EAAD,CAAenI,UAAW,uBACtB,kBAACQ,EAAA,EAAD,CAAQR,UAAU,iBAAiBM,QArCvB,kBAAM0H,GAA0B,KAqCkBlJ,EAAI,OAAlE,IAA+EA,EAAI,QACnF,kBAAC,IAAD,CAAMkB,UAAU,kBAAkB2C,GAAI,CAACO,SAAS,gBAAD,OAAkBmM,EAAOvW,IAAM0F,MAAO,CAAC6Q,OAAQA,KAAWvQ,EAAI,KAA7G,IAAwHA,EAAI,SAEhI,4BAAKuQ,EAAO1F,OACZ,kBAAC9H,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,KACI,wBAAI9B,UAAU,OACV,wBAAIA,UAAU,YAAd,UACA,wBAAIA,UAAU,YAAYqP,EAAOtW,QAErC,wBAAIiH,UAAU,OACV,wBAAIA,UAAU,YAAYlB,EAAK,gBAA/B,KACA,wBAAIkB,UAAU,YAAYqP,EAAO1F,QAErC,wBAAI3J,UAAU,OACV,wBAAIA,UAAU,YAAYlB,EAAK,sBAA/B,KACA,wBAAIkB,UAAU,YAAYqP,EAAOP,cAErC,wBAAI9O,UAAU,OACV,wBAAIA,UAAU,YAAYlB,EAAK,yBAA/B,KACA,wBAAIkB,UAAU,YAAYqP,EAAOJ,UAAU5K,SAE/C,wBAAIrE,UAAU,OACV,wBAAIA,UAAU,YAAYlB,EAAK,yBAA/B,KACA,wBAAIkB,UAAU,aAAY,UAAAqP,EAAOH,uBAAP,eAAwB7K,SAAU,IAEhE,wBAAIrE,UAAU,OACV,wBAAIA,UAAU,YAAYlB,EAAI,KAA9B,KACA,wBAAIkB,UAAU,YAAYqP,EAAON,SAI7C,kBAAC,GAAD,CAAezS,KAAM+S,EAAQ1R,QAASmB,EAAI,OAAa,IAAMA,EAAI,OAAa,IAAMuQ,EAAO1F,MAAQ,KAAMvC,UAAWW,EAAwBd,eAAgBgB,EAAkBL,WA3D1J,SAACtL,GACzB,sBAAC,sBAAAxC,EAAA,+EAEa6U,GAAaU,GAF1B,OAGOrO,EAAQY,KAAK,WAHpB,+CAKOpC,EAASD,EAAU,KAAI5B,SAL9B,uDAAD,GAQAsK,SCoHO4I,GAzIgC,SAAC,GAAsB,IAArBnY,EAAoB,EAApBA,MAAOsI,EAAa,EAAbA,QAAa,EACnCpB,mBAA6B,IADM,mBAC1DkR,EAD0D,KACjDC,EADiD,OAEnCnR,mBAAS,IAF0B,mBAE1DiE,EAF0D,KAEjDC,EAFiD,KAG3DhF,EAAOa,aAAY,SAACnB,GAAD,OAA2BA,EAAMM,QAHO,EAKrCc,mBAAQ,2BAAoB,IAAI0O,IAAxB,IAAyCzK,QAASA,KALrB,mBAK1D3J,EAL0D,aAMnB0F,mBAA6B,OANV,mBAM1DkL,EAN0D,KAMzCC,EANyC,OAOnBnL,oBAAS,GAPU,mBAO1DoL,EAP0D,KAOzCC,EAPyC,OAQXrL,oBAAS,GARE,mBAQ1DoR,EAR0D,KAQrCC,EARqC,OASLrR,oBAAS,GATJ,mBAS1DsR,EAT0D,KASlCC,EATkC,KA4B3D3F,EAAuC,CACzC,CAACtC,KAAMkI,KAAYlT,KAAMY,EAAI,MAAWL,OAVxB,SAACiL,GACjBqB,EAAmBrB,GACnBuH,GAAuB,KASvB,CAAC/H,KAAMmI,KAAgBnT,KAAMY,EAAK,mBAAoBL,OAP/B,SAACiL,GACxBqB,EAAmBrB,GACnByH,GAA0B,KAM1B,CAACjI,KAAMwC,KAAQxN,KAAMY,EAAI,KAAUL,OAfpB,SAACiL,GAChB1I,EAAQY,KAAR,uBAA6B8H,EAAO5Q,IAAM,CAACuW,OAAQ3F,MAenD,CAACR,KAAMyC,KAAYzN,KAAMY,EAAI,OAAYL,OApBxB,SAACiL,GAClBqB,EAAmBrB,GACnBuB,GAAmB,MAmDvB7J,qBAAU,WACNlH,EAAO2J,QAAUA,EACjB,sBAAC,4BAAA/J,EAAA,sEAC0B0U,GAAWtU,GADrC,OACS6C,EADT,OAEGgU,EAAWhU,EAASO,MAFvB,0CAAD,KAID,CAACpD,EAAQ2J,IACZ,IAAMyN,EAAa,oCACf,kBAACxL,GAAA,EAAD,KACI,kBAACA,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GACnB,kBAAC,IAAD,CAAMrD,GAAI,KAAV,cAEJ,kBAACmD,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GAClBlH,EAAI,SAGb,kBAACqJ,GAAA,EAAD,CAAenI,UAAW,eACtB,kBAAC,IAAD,CAAMA,UAAU,kBAAkB2C,GAAI,eAAgB7D,EAAI,IAA1D,IAAoEA,EAAI,SAE5E,4BAAKA,EAAI,QACT,kBAACuH,GAAA,EAAD,KACI,kBAACzD,EAAA,EAAD,CAAKiJ,IAAE,EAACC,GAAI,CAAChJ,KAAM,EAAGC,OAAQ,IAC1B,kBAAChB,EAAA,EAAKI,QAAN,CAAczD,KAAM,OAAQ0D,YAAatD,EAAI,OAAYsG,KAAM,UAAWmB,aAAcrM,EAAO2J,QAASxB,SAAU,SAACf,GAAD,OAAYwC,EAAWxC,EAAE6D,OAAO5C,YAG1J,kBAACV,EAAA,EAAD,KACI,kBAACkK,GAAA,EAAD,CAAOC,YAAU,GACb,+BACI,4BACK,CAAC,QAASlN,EAAK,gBAAiBA,EAAK,yBAA0BA,EAAK,yBAA0BA,EAAI,QAAYmF,KAAI,SAAC3H,EAAM6H,GAAP,OAAe,wBAAIA,IAAKA,GAAM7H,QAGzJ,+BACKwU,EAAQ7M,KAAI,SAAC3H,EAAM6H,GAAP,aACT,wBAAIA,IAAKA,GACL,4BAAI,kBAAC,IAAD,CAAMxB,GAAE,UAAKjK,EAAMgJ,IAAX,YAAkBpF,EAAKxD,KAAOwD,EAAKvD,QAC/C,4BAAKuD,EAAKqN,OACV,4BAAKrN,EAAK2S,UAAU5K,QACpB,6BAAK,UAAA/H,EAAK4S,uBAAL,eAAsB7K,SAAU,GACrC,4BAAI,kBAAC,GAAD,CAAe2E,KAAMwC,EAAY9B,OAAQpN,YAMjE,kBAAC,GAAD,CAAeqB,QAASmB,EAAI,OAAa,IAAMA,EAAI,OAAa,KAAxC,OAA8CgM,QAA9C,IAA8CA,OAA9C,EAA8CA,EAAiBnB,OAAQ,KAAMvC,UAAW4D,EAAiB/D,eAhE/G,SAAC3K,GACnByO,EAAmB,MACnBE,GAAmB,IA8D6IrD,WA3ElJ,SAACtL,GACf2O,GAAmB,GACN,OAAT3O,GAGJ,sBAAC,sBAAAxC,EAAA,sEACS6U,GAAarS,GADtB,OAEGyU,EAAWD,EAAQ5W,QAAO,SAAA+R,GAAC,OAAIA,EAAEnT,KAAOwD,EAAKxD,OAC7CiS,EAAmB,MAHtB,0CAAD,IAsEuLzO,KAAMwO,IAC5LkG,GAAuB,kBAAC9J,GAAA,EAAD,CAAOC,KAAM6J,EAAqB3J,OA7DpC,WACtB0D,EAAmB,MACnBkG,GAAuB,KA4DnB,kBAAC/J,GAAA,EAAMpF,KAAP,KACI,kBAACC,EAAA,EAAKI,QAAN,CAAczD,KAAK,OAAO+O,UAAU,EAAMlL,MAtD7CuI,EAGE3M,6CAAkE,OAAf2M,QAAe,IAAfA,OAAA,EAAAA,EAAiBhS,KAAM,IAFtE,OAwDVoY,GAA0B,kBAAChK,GAAA,EAAD,CAAOC,KAAM+J,EAAwB7J,OA9DvC,WACzB0D,EAAmB,MACnBoG,GAA0B,KA6DtB,kBAACjK,GAAA,EAAMpF,KAAP,KACI,uEAOZ,OACI,6BACI,kBAAC,IAAD,CAAOsK,OAAK,EAACxO,KAAMlF,EAAMkF,KAAMyO,OAAQ,kBAAMiF,KAC7C,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO1T,KAAI,UAAKlF,EAAMkF,KAAX,QAAuBnE,UAAWgW,KAC7C,kBAAC,IAAD,CAAO7R,KAAI,UAAKlF,EAAMkF,KAAX,aAA4BnE,UAAWgW,KAClD,kBAAC,IAAD,CAAO7R,KAAI,UAAKlF,EAAMkF,KAAX,QAAuBnE,UAAWmX,QCtH9CW,GAtBkD,SAAC,GAAa,IAAZ7Y,EAAW,EAAXA,MAAW,EAE9CkH,mBAAS,IAAIiP,IAFiC,mBAEnEQ,EAFmE,UAU1E,OANAjO,qBAAU,WACN,sBAAC,sBAAAtH,EAAA,yFAAD,KAGD,CAACpB,IAGA,oCACI,4BAAK2W,EAAO1F,OACZ,kBAAC9H,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,sCCuCD0P,GAvCY,WACvB,IAAM1S,EAAOa,aAAY,SAACnB,GAAD,OAA2BA,EAAMM,QAE1D,OACI,kBAAC,IAAD,CAAQ2S,SAAU,KACd,yBAAKzR,UAAW,OACZ,kBAAC,GAAD,MACA,yBAAKA,UAAW,WACZ,kBAAC0R,EAAA,EAAD,CAAQ3R,QAAS,OAAQ4R,kBAAgB,EAACC,OAAQ,MAC9C,kBAACF,EAAA,EAAOG,OAAR,CAAeC,gBAAe,0BAC9B,kBAACJ,EAAA,EAAOxE,SAAR,CAAiBpU,GAAI,yBACjB,kBAAC0J,EAAA,EAAD,CAAKzC,QAAS,QAASC,UAAW,eAC9B,kBAACwC,EAAA,EAAIC,KAAL,CAAU/B,GAAIgC,IAASC,GAAI,cAAe7D,EAAI,WAC9C,kBAAC0D,EAAA,EAAIC,KAAL,CAAU/B,GAAIgC,IAASC,GAAI,WAAY7D,EAAK,gBAC5C,kBAAC0D,EAAA,EAAIC,KAAL,CAAU/B,GAAIgC,IAASC,GAAI,SAAU7D,EAAK,kBAK1D,yBAAKkB,UAAW,WACZ,kBAACoD,EAAA,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOxF,KAAM,SAAUnE,UAAWsH,KAClC,kBAAC,IAAD,CAAOqL,OAAK,EAACxO,KAAM,yBAA0BnE,UAAW6S,KACxD,kBAAC,IAAD,CAAOF,OAAK,EAACxO,KAAM,oBAAqBnE,UAAW8X,KACnD,kBAAC,GAAD,CAAiB3T,KAAM,UAAWnE,UAAWoX,KAC7C,kBAAC,GAAD,CAAiBjT,KAAM,QAASnE,UAAWkR,KAC3C,kBAAC,GAAD,CAAiB/M,KAAM,WAAYnE,UAAW6T,KAC9C,kBAAC,GAAD,CAAiB1P,KAAM,mBAAoBnE,UAAWwU,KACtD,kBAAC,GAAD,CAAiBrQ,KAAM,IAAKnE,UAAW0J,WCkBpD4O,GAxD8C,SAACtS,GAC1D,IAAMX,EAAOa,aAAY,SAACnB,GAAD,OAA2BA,EAAMM,QADU,EAE1Cc,mBAAS,IAFiC,mBAE7D7G,EAF6D,KAEtDkI,EAFsD,OAGZrB,oBAAS,GAHG,mBAG7DoS,EAH6D,KAGvCC,EAHuC,OAItCrS,oBAAS,GAJ6B,mBAI7DQ,EAJ6D,KAIpDe,EAJoD,KAK9D5B,EAAWM,cAEjBuB,qBAAU,WACNrH,EAAO+D,WACR,IAEH,IAIMuD,EAAM,uCAAG,WAAOC,GAAP,SAAAxH,EAAA,6DACXwH,EAAEC,iBACFJ,GAAW,GACX5B,EAAS,CAACb,KnCzBW,gBmCyBUU,MAAO,KAH3B,kBAKDrF,EAAOmY,qBAAqBnZ,GAL3B,OAMPkZ,GAAwB,GANjB,gDAQP1S,EAAS,CAACb,KnC9BO,gBmC8BcU,MAAO,KAAIzB,UARnC,QAUXwD,GAAW,GAVA,yDAAH,sDAaZ,OACI,yBAAKnB,UAAW,aACZ,wBAAIA,UAAW,eAAgBlB,EAAK,oBACpC,kBAAC+C,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,KACI,kBAACC,EAAA,EAAD,CAAMC,SAAUX,GACX2Q,EACK,4BAAKlT,EAAK,2BAA6B,IAAInD,QAAQ,UAAW5C,IAC9D,kBAACgJ,EAAA,EAAKE,MAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,cACA,kBAACH,EAAA,EAAKI,QAAN,CAAczD,KAAM,QAAS0D,YAAa,QAASC,SAAU,SAACf,GAAD,OAAYL,EAASK,EAAEgB,cAAcC,WAG1G,kBAAC4F,GAAA,EAAD,KACI,kBAAC4E,GAAA,EAAD,MACMiF,GAAwB,kBAAC,GAAD,CAAe5R,QAASA,EAASC,UA/B5E/H,QAAQS,IAAUqH,IA+BmFtB,EAAI,QAE5F,kBAACiO,GAAA,EAAD,KACI,kBAACvK,EAAA,EAAIC,KAAL,CAAU/B,GAAIgC,IAASC,GAAI,UAAW7D,EAAI,cCzB3DqT,GArBa,WACxB,OACI,kBAAC,IAAD,CAAQV,SAAU,KACd,yBAAKzR,UAAW,OACZ,yBAAKA,UAAW,WACZ,kBAACoD,EAAA,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOgJ,OAAK,EAACxO,KAAM,yBAA0BnE,UAAW6S,KACxD,kBAAC,IAAD,CAAOF,OAAK,EAACxO,KAAM,2BAA4BnE,UAAWsY,KAC1D,kBAAC,IAAD,CAAO3F,OAAK,EAACxO,KAAM,oBAAqBnE,UAAW8X,KACnD,kBAAC,IAAD,CAAO3T,KAAM,SAAUnE,UAAWsH,KAClC,kBAAC,GAAD,CAAiBnD,KAAM,IAAKnE,UAAW0J,WCbnEiP,IAAS/F,OACL,kBAAC,IAAD,CAAUgG,MAAOA,GACZtY,EAAOuE,cAAgB,kBAAC,GAAD,OACtBvE,EAAOuE,cAAgB,kBAAC,GAAD,OAE7BgU,SAASC,eAAe,S5C4HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1T,GACL2T,QAAQ3T,MAAMA,EAAMzB,a","file":"static/js/main.10958518.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {v4} from 'uuid';\r\n\r\nexport enum UserRole {\r\n    ROLE_USER = 'ROLE_USER',\r\n    ROLE_ADMIN = 'ROLE_ADMIN',\r\n    ROLE_STAFF = 'ROLE_STAFF',\r\n}\r\n\r\nclass UserModel {\r\n    id: string;\r\n    email: string = '';\r\n    roles: Array<string> = [];\r\n    firstName: string = '';\r\n    lastName: string = '';\r\n    fullName: string = '';\r\n    phone?: string;\r\n    password?: string;\r\n\r\n    constructor() {\r\n        this.id = v4();\r\n    }\r\n}\r\n\r\nexport default UserModel;\r\n","import UserModel, {UserRole} from '../model/UserModel';\r\nimport {getUser} from './user/userApi';\r\n\r\ninterface Credentials {\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\nenum HttpMethods {\r\n    GET = 'GET',\r\n    POST = 'POST',\r\n    PUT = 'PUT',\r\n    PATCH = 'PATCH',\r\n    DELETE = 'DELETE',\r\n}\r\n\r\nclass Session {\r\n    token: string = '';\r\n    refreshToken: string = '';\r\n    user = new UserModel();\r\n\r\n    constructor() {\r\n        this.loadToken();\r\n    }\r\n\r\n    loadToken() {\r\n        if (localStorage.getItem('session')) {\r\n            const sess = JSON.parse(localStorage.session);\r\n            this.token = sess.token;\r\n            this.refreshToken = sess.refreshToken;\r\n            this.user = sess.user;\r\n        }\r\n    }\r\n\r\n    authorization() {\r\n        this.loadToken();\r\n        return {Authorization: `Bearer ${this.token}`};\r\n    }\r\n\r\n    set(token: string, refreshToken: string, user: UserModel) {\r\n        this.token = token;\r\n        this.refreshToken = refreshToken;\r\n        this.user = user;\r\n        localStorage.setItem('session', JSON.stringify(this));\r\n    }\r\n\r\n    clear() {\r\n        this.set('', '', new UserModel());\r\n    }\r\n}\r\n\r\nclass ApiClient {\r\n    private session: Session;\r\n    private readonly baseUrl: string;\r\n\r\n    constructor(baseUrl: string, session: Session) {\r\n        this.baseUrl = baseUrl.replace(/\\/$/, '');\r\n        this.session = session;\r\n    }\r\n    async get(endpoint: string, headerContentType = 'application/json') {\r\n        return await this.request(HttpMethods.GET, endpoint, undefined, headerContentType);\r\n    }\r\n    async post(endpoint: string, payload?: any) {\r\n        return await this.request(HttpMethods.POST, endpoint, payload);\r\n    }\r\n    async put(endpoint: string, payload: any) {\r\n        return await this.request(HttpMethods.PUT, endpoint, payload);\r\n    }\r\n    async patch(endpoint: string, payload: any) {\r\n        return await this.request(HttpMethods.PATCH, endpoint, payload);\r\n    }\r\n    async delete(endpoint: string) {\r\n        return await this.request(HttpMethods.DELETE, endpoint);\r\n    }\r\n\r\n    isLoggedIn(): boolean {\r\n        return Boolean(this.session.token);\r\n    }\r\n    getUser(): UserModel {\r\n        return this.session.user;\r\n    }\r\n    isAdmin(): boolean {\r\n        const user = this.getUser();\r\n        return user && user.roles.find(item => item === UserRole.ROLE_ADMIN) !== undefined;\r\n    }\r\n\r\n    logout() {\r\n        this.session.clear();\r\n    }\r\n    async login(credentials: Credentials) {\r\n        const response = await fetch(this.absUrl('/login_check'), {\r\n            method: HttpMethods.POST,\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(credentials),\r\n        });\r\n        if (!response.ok) {\r\n            const msg = response.status === 401 ? 'Invalid username or password' : 'Something has gone wrong, please try again';\r\n            throw Error(`Login failed: ${msg}`);\r\n        }\r\n        const json = await response.json();\r\n        this.session.set(json.token, json.refreshToken, new UserModel());\r\n        const responseUser = await getUser('me');\r\n        this.session.set(json.token, json.refreshToken, responseUser.data);\r\n    }\r\n\r\n    async requestPasswordReset(email: string) {\r\n        const response = await fetch(this.absUrl('/password-reset-request'), {\r\n            method: HttpMethods.POST,\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({email: email}),\r\n        });\r\n        if (!response.ok) {\r\n            throw Error(`Password reset request failed: ${response.statusText}`);\r\n        }\r\n    }\r\n\r\n    async resetPassword(token: string, password: string) {\r\n        const response = await fetch(this.absUrl('/password-reset'), {\r\n            method: HttpMethods.POST,\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({token: token, password: password}),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            let responseBody = null;\r\n            const contentType = response.headers.get('content-type');\r\n            if (contentType && contentType.includes('application/json')) {\r\n                responseBody = await response.json();\r\n            }\r\n            const message = responseBody && responseBody.message ? responseBody.message : response.statusText;\r\n            throw Error(`Password reset failed: ${message}`);\r\n        }\r\n    }\r\n\r\n    private absUrl(path: string): string {\r\n        const sep = path[0] === '/' ? '' : '/';\r\n        return `${this.baseUrl}${sep}${path}`;\r\n    }\r\n\r\n    private async refresh() {\r\n        const response = await fetch(this.absUrl('/token/refresh'), {\r\n            method: HttpMethods.POST,\r\n            headers: {'Content-Type': 'application/x-www-form-urlencoded'},\r\n            body: 'refreshToken=' + this.session.refreshToken,\r\n        });\r\n\r\n        if (response.ok) {\r\n            const json = await response.json();\r\n            this.session.set(json.token, json.refreshToken, this.getUser());\r\n            const responseUser = await getUser('me');\r\n            this.session.set(json.token, json.refreshToken, responseUser.data);\r\n        } else if (response.status === 401) {\r\n            this.logout();\r\n            window.location.reload();\r\n        } else {\r\n            throw Error(`API Request failed: ${response.statusText}`);\r\n        }\r\n    }\r\n\r\n    private async request(method: HttpMethods, endpoint: string, body = undefined, headerContentType: string = 'application/json') {\r\n        let response = await fetch(this.absUrl(endpoint), {\r\n            method: method,\r\n            headers: {...this.session.authorization(), 'Content-Type': headerContentType},\r\n            body: JSON.stringify(body),\r\n        });\r\n\r\n        if (response.status === 401) {\r\n            await this.refresh();\r\n            response = await fetch(this.absUrl(endpoint), {\r\n                method: method,\r\n                headers: {...this.session.authorization(), 'Content-Type': headerContentType},\r\n                body: JSON.stringify(body),\r\n            });\r\n        }\r\n\r\n        let responseBody = null;\r\n        const contentType = response.headers.get('content-type');\r\n        if (contentType && contentType.includes('application/json')) {\r\n            responseBody = await response.json();\r\n        } else if (contentType && contentType.includes('text/csv')) {\r\n            responseBody = await response.text();\r\n        }\r\n\r\n        if (!response.ok) {\r\n            const message = responseBody && responseBody.message ? responseBody.message : response.statusText;\r\n            throw Error(`Request failed: ${message}`);\r\n        }\r\n\r\n        return responseBody;\r\n    }\r\n}\r\n\r\nexport default new ApiClient(process.env.REACT_APP_API_BASE_URL || '', new Session());\r\n","export interface Response<T> {\r\n    data: T;\r\n}\r\nexport interface CollectionResponse<T> {\r\n    data: [T];\r\n}\r\nexport const encode = (component: object): string => {\r\n    return encodeURIComponent(JSON.stringify(component));\r\n};","import UserModel from '../../model/UserModel';\r\nimport client from '../client';\r\nimport {CollectionResponse, Response, encode} from '../api';\r\nimport UserFilter from '../../model/filter/UserFilter';\r\nimport PasswordChangeModel from \"../../model/PasswordChangeModel\";\r\n\r\nexport const getUser = async (id: string): Promise<Response<UserModel>> => {\r\n    return await client.get(`/user/${id}`);\r\n};\r\n\r\nexport const getUsers = async (filter: UserFilter): Promise<CollectionResponse<UserModel>> => {\r\n    return await client.get(`/users?filter=${encode(filter)}`);\r\n};\r\n\r\nexport const putUser = async (payload: UserModel) => {\r\n    return await client.put(`/user/${payload.id}`, payload);\r\n};\r\n\r\nexport const patchUser = async (payload: UserModel) => {\r\n    return await client.patch(`/user/${payload.id}`, payload);\r\n};\r\n\r\nexport const deleteUser = async (payload: UserModel) => {\r\n    return await client.delete(`/user/${payload.id}`);\r\n};\r\n\r\nexport const changePassword = async (payload: PasswordChangeModel) => {\r\n  return await client.patch(`/user/${payload.id}/change-password`, payload);\r\n};\r\n\r\nexport const adminGeneratePassword = async (payload: any) => {\r\n    return await client.patch(`/user/${payload.id}/generate-password`, payload);\r\n};","import React from 'react';\r\nimport {Modal, Button, Form} from 'react-bootstrap';\r\nimport {useSelector} from \"react-redux\";\r\nimport {StateInterface} from \"../../store/store\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport enum ElementType {\r\n    TEXT = 'TEXT',\r\n    DATE = 'DATE',\r\n    DATE_TIME = 'DATE_TIME',\r\n    FILE = 'FILE',\r\n    CHECKBOX = 'CHECKBOX',\r\n    RADIO = 'RADIO',\r\n    DROPDOWN = 'DROPDOWN',\r\n    BUTTON = 'BUTTON',\r\n    PASSWORD = 'PASSWORD',\r\n    LINK_ACTION = 'LINK_ACTION'\r\n}\r\nexport interface ElementOptionInterface {\r\n    value: string;\r\n    text: string;\r\n    selected: boolean;\r\n}\r\nexport interface ElementInterface {\r\n    type: string;\r\n    name: string;\r\n    onChange: (value: any) => any;\r\n    className?: string;\r\n    value: string;\r\n    options?: Array<ElementOptionInterface>,\r\n    required?: boolean,\r\n    label?: string,\r\n    clickAction?: (item: any) => any\r\n}\r\n\r\ntype FormInputModalProps = {\r\n    onOkAction: (item: any) => any,\r\n    onCancelAction: (item: any) => any,\r\n    title: string\r\n    elements: Array<ElementInterface>,\r\n    okText?: string,\r\n    cancelText?: string,\r\n    isDisplay: boolean,\r\n    item: any\r\n}\r\n\r\nconst FormInputModal: React.FC<FormInputModalProps> = (props) => {\r\n    const lang = useSelector((state: StateInterface) => state.lang);\r\n    const onCloseHandle = () => {\r\n        props.onCancelAction(props.item);\r\n    };\r\n    const onOkHandle = () => {\r\n        props.onOkAction(props.item);\r\n    };\r\n    return (\r\n        <>\r\n            <Modal centered show={props.isDisplay} onHide={onCloseHandle}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{props.title || lang['input-require']}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        {props.elements.map((e: ElementInterface, key) => (\r\n                            <Form.Group key={key}>\r\n                                {e.label && <Form.Label>{e.label || ''}</Form.Label>}\r\n                                {e.type === ElementType.TEXT &&\r\n                                    <Form.Control placeholder={e.label || ''} autoComplete={'off'} required={e.required || false} type={'text'} name={e.name} className={e.className || ''} value={e.value} onChange={event => e.onChange(event.target.value)} ></Form.Control>\r\n                                }\r\n                                {e.type === ElementType.DATE &&\r\n                                    <Form.Control placeholder={e.label || ''} autoComplete={'off'} required={e.required || false} type={'date'} name={e.name} className={e.className || ''} value={e.value} onChange={event => e.onChange(event.target.value)} ></Form.Control>\r\n                                }\r\n                                {e.type === ElementType.PASSWORD &&\r\n                                    <Form.Control placeholder={e.label || ''} autoComplete={'off'} required={e.required || false} type={'password'} name={e.name} className={e.className || ''} value={e.value} onChange={event => e.onChange(event.target.value)} ></Form.Control>\r\n                                }\r\n                                {e.type === ElementType.LINK_ACTION &&\r\n                                    <Link to={'#'} title={e.label || ''} className={e.className || ''} onClick={e.clickAction}>{e.value || lang['click-here']}</Link>\r\n                                }\r\n                            </Form.Group>\r\n                        ))}\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={onCloseHandle}>\r\n                        {props.cancelText || lang['cancel']}\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={onOkHandle}>\r\n                        {props.okText || lang['ok']}\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FormInputModal;\r\n","import client from '../../api/client';\r\nimport {LOGIN_SUCCESS, LOGIN_FAILURE, LOGOUT} from '../types';\r\n\r\nconst initialState = {\r\n    isAuthenticated: client.isLoggedIn()\r\n};\r\n\r\ninterface UserAction {\r\n    type: string;\r\n}\r\n\r\nconst authReducer = (state = initialState, action: UserAction) => {\r\n    switch (action.type) {\r\n        case LOGIN_SUCCESS:\r\n            return {...state, isAuthenticated: true};\r\n        case LOGIN_FAILURE:\r\n        case LOGOUT:\r\n            return {...state, isAuthenticated: false};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n","export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\nexport const LOGOUT = 'LOGOUT';\r\n\r\nexport const ERROR_GENERAL = 'ERROR_GENERAL';\r\n","import {ERROR_GENERAL} from '../types';\r\n\r\nconst initialState = {\r\n    statusCode: 200,\r\n    message: ''\r\n};\r\n\r\ninterface ErrorAction {\r\n    type: string;\r\n    message: string;\r\n}\r\n\r\nconst errorReducer = (state = initialState, action: ErrorAction) => {\r\n    if (action.message === '') {\r\n        return {...state, statusCode: 200, message: ''};\r\n    }\r\n    switch (action.type) {\r\n        case ERROR_GENERAL:\r\n            return {...state, statusCode: 400, message: action.message};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default errorReducer;\r\n","\r\nimport vi from '../../material/i18n/vi.json';\r\nimport en from '../../material/i18n/en.json';\r\n\r\nconst initialState = {\r\n    vi: vi,\r\n    en: en\r\n};\r\n\r\ninterface I18nAction {\r\n    lang: string;\r\n}\r\n\r\nconst i18nReducer = (state = initialState, action: I18nAction) => {\r\n    switch (action.lang) {\r\n        case 'vi': return vi;\r\n        default: return en;\r\n    }\r\n};\r\n\r\nexport default i18nReducer;\r\n","import {combineReducers, createStore} from 'redux';\r\nimport authReducer from './reducers/authReducer';\r\nimport errorReducer from './reducers/errorReducer';\r\nimport i18nReducer from './reducers/i18nReducer';\r\n\r\nlet rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    error: errorReducer,\r\n    lang: i18nReducer\r\n});\r\n\r\nexport type StateInterface = ReturnType<typeof rootReducer>\r\n\r\nexport default createStore(rootReducer);\r\n","import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Alert} from 'react-bootstrap';\r\nimport {ERROR_GENERAL} from '../../store/types';\r\nimport {StateInterface} from '../../store/store';\r\n\r\nexport const clearError = (dispatch: any) => {\r\n    setError(dispatch, '');\r\n}\r\nexport const setError = (dispatch: any, error: string) => {\r\n    dispatch({type: ERROR_GENERAL, message: error});\r\n}\r\n\r\ntype ErrorProps = {\r\n    error?: string\r\n}\r\n\r\nconst Error: React.FC<ErrorProps> = (props) => {\r\n    const errorState = useSelector((state: StateInterface) => state.error);\r\n    const [error, setError] = useState(props.error || errorState.message);\r\n    const dispatch = useDispatch();\r\n    const onClickCloseHandle = () => {\r\n        dispatch({type: ERROR_GENERAL, error: ''});\r\n        setError('');\r\n    }\r\n\r\n    return (\r\n        <>{(error || errorState.message) &&\r\n            <Alert variant={'danger'} className={'mt-5'} onClose={onClickCloseHandle} dismissible>\r\n                {error || errorState.message}\r\n            </Alert>}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Error;\r\n","import Spinner from 'react-bootstrap/Spinner';\r\nimport Button from 'react-bootstrap/Button';\r\nimport React from 'react';\r\nimport {ButtonProps} from 'react-bootstrap';\r\n\r\ninterface SubmitButtonProps extends ButtonProps {\r\n    loading?: boolean;\r\n    onClick?: any;\r\n}\r\n\r\nconst LoadingButton: React.FC<SubmitButtonProps> = ({type = 'submit', loading = false, disabled = false, onClick = () => {}, variant = 'primary', children}) => {\r\n    return (\r\n        <Button type={type} disabled={disabled} onClick={onClick} variant={variant}>\r\n            {loading ? <Spinner as={'span'} animation={'border'} size={'sm'} role={'status'} aria-hidden={'true'} /> : <>{children}</>}\r\n        </Button>\r\n    )\r\n};\r\n\r\nexport default LoadingButton;\r\n","import React, {FormEvent, useState, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Form, Card, Col, Nav} from 'react-bootstrap';\r\nimport {RouteComponentProps} from 'react-router';\r\nimport client from '../../api/client';\r\nimport {LOGIN_SUCCESS, LOGIN_FAILURE, ERROR_GENERAL} from '../../store/types';\r\nimport LoadingButton from '../utils/LoadingButton';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {clearError} from '../utils/Error';\r\nimport {StateInterface} from '../../store/store';\r\n\r\nconst UserLogin: React.FC<RouteComponentProps<{}, any, {from?: string}>> = ({history, location}) => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const lang = useSelector((state: StateInterface) => state.lang);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        client.logout();\r\n    }, []);\r\n\r\n    const canSubmit = (): boolean => {\r\n        return Boolean(email && password && !loading);\r\n    };\r\n\r\n    const submit = async (e: FormEvent) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        clearError(dispatch);\r\n        try {\r\n            await client.login({username: email, password: password});\r\n            dispatch({type: LOGIN_SUCCESS});\r\n            var url = '/';\r\n            if (location && location.state && location.state.from) {\r\n                url = location.state.from;\r\n            }\r\n            history.push(url);\r\n            window.location.reload();\r\n        } catch (err) {\r\n            dispatch({type: ERROR_GENERAL, message: lang['login-failed']});\r\n            dispatch({type: LOGIN_FAILURE});\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    return (\r\n        <div className={'login-box'}>\r\n            <h2 className={'text-center text-primary'}>{lang['login-title']}</h2>\r\n            <Card className={'mt-3'}>\r\n                <Card.Body>\r\n                    <Form onSubmit={submit}>\r\n                        <Form.Group>\r\n                            <Form.Label>Email</Form.Label>\r\n                            <Form.Control type={'email'} placeholder={'Email'} onChange={(e: any) => setEmail(e.currentTarget.value)} />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>{lang['password']}</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Password\" onChange={(e: any) => setPassword(e.currentTarget.value)} />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Nav.Link as={NavLink} to={'/forgot-password-request'}>{lang['reset-password']}</Nav.Link>\r\n                            <Col className={'text-right pr-0'} md={{span: 6, offset: 6}}>\r\n                                <LoadingButton loading={loading} disabled={!canSubmit()}>{lang['login']}</LoadingButton>\r\n                            </Col>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserLogin;\r\n","import React from 'react';\r\nimport {Redirect, Route, RouteProps} from 'react-router';\r\nimport {useSelector} from 'react-redux';\r\nimport {StateInterface} from '../../store/store';\r\n\r\nconst AuthorisedRoute: React.FC<RouteProps> = ({location, ...rest}) => {\r\n    const authState = useSelector((state: StateInterface) => state.auth);\r\n    return (\r\n        authState.isAuthenticated ? <Route {...rest} /> : <Redirect to={{pathname: '/login', state: {from: location ? location.pathname : '/'}}} />\r\n    )\r\n};\r\n\r\nexport default AuthorisedRoute;\r\n","import React from 'react';\r\nimport {RouteComponentProps} from 'react-router-dom';\r\nimport {useSelector} from 'react-redux';\r\nimport {StateInterface} from '../../store/store';\r\nimport {Card, Container} from 'react-bootstrap';\r\n\r\nconst Dashboard: React.FC<RouteComponentProps> = ({match, history}) => {\r\n    const lang = useSelector((state: StateInterface) => state.lang);\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n   \r\n\r\n    return (\r\n        <Container>\r\n            <Card>\r\n                <Card.Body>\r\n                    <h1>{lang['welcome']}</h1>\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Badge, Form} from 'react-bootstrap';\r\n\r\nexport class SearchMultiSelectionItem {\r\n    id: string = '';\r\n    text: string = '';\r\n    value: any;\r\n}\r\n\r\ntype SearchMultiSelectionProps = {\r\n    placeholder?: string;\r\n    selected?: Array<SearchMultiSelectionItem>;\r\n    className?: string;\r\n    name?: string;\r\n    onChange?: any;\r\n    data?: Array<SearchMultiSelectionItem>;\r\n}\r\n\r\nconst SearchMultiSelection: React.FC<SearchMultiSelectionProps> = (props) => {\r\n    const [selectedItems, setSelectedItems] = useState<Array<SearchMultiSelectionItem>>(props.selected || []);\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    const [data, setData] = useState<Array<SearchMultiSelectionItem>>(props.data || []);\r\n    const [isFocus, setIsFocus] = useState(false);\r\n    const [isInSelection, setIsInSelection] = useState(false);\r\n    const [keyword, setKeyword] = useState('');\r\n    const [currentSelectedIndex, setCurrentSelectedIndex] = useState(-1);\r\n\r\n    const onFocusHandle = () => {\r\n        setIsFocus(true);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setKeyword('');\r\n        props.onChange(selectedItems);\r\n        setCurrentSelectedIndex(-1);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [selectedItems]);\r\n\r\n    const outFocusHandle = () => {\r\n        setCurrentSelectedIndex(-1);\r\n        setIsFocus(false);\r\n    };\r\n\r\n    const onMouseEnterHandle = () => {\r\n        setIsInSelection(true);\r\n    };\r\n\r\n    const onMouseLeaveHandle = () => {\r\n        setIsInSelection(false);\r\n    };\r\n\r\n    const onKeywordChangeHandle = (e: any) => {\r\n        setCurrentSelectedIndex(-1);\r\n        setKeyword(e.target.value);\r\n    };\r\n\r\n    const onSelectHandle = (itemClick: any) => {\r\n        if (selectedItems.filter(item => item.id === itemClick.id).length === 0) {\r\n            selectedItems.push(itemClick);\r\n            setSelectedItems(selectedItems.map(item => item));\r\n        }\r\n    };\r\n\r\n    const onRemoveHandle = (itemClick: any) => {\r\n        if (selectedItems.filter(item => item.id === itemClick.id).length > 0) {\r\n            setSelectedItems(selectedItems.filter(item => item.id !== itemClick.id));\r\n        }\r\n    };\r\n\r\n    const onKeyDownHandle = (e: any) => {\r\n        let filterData = data.filter(item => (item.id.toLocaleLowerCase().indexOf(keyword.toLocaleLowerCase()) >= 0 && selectedItems.filter(select => select.id === item.id).length === 0));\r\n        if (filterData.length === 0) {\r\n            return;\r\n        }\r\n        //Enter\r\n        if (e.keyCode === 13) {\r\n            e.preventDefault();\r\n            if (currentSelectedIndex > filterData.length - 1 || currentSelectedIndex < 0) {\r\n                return;\r\n            }\r\n            let seletectItem = filterData[currentSelectedIndex];\r\n            if (selectedItems.filter(item => item.id === seletectItem.id).length === 0) {\r\n                selectedItems.push(seletectItem);\r\n                setSelectedItems(selectedItems.map(item => item));\r\n            }\r\n            return;\r\n        }\r\n        if (e.keyCode !== 38 && e.keyCode !== 40) {\r\n            return;\r\n        }\r\n        let navigate = -1;\r\n        //ArrowDown\r\n        if (e.keyCode === 40) {\r\n            navigate = 1;\r\n        }\r\n        setCurrentSelectedIndex(Math.min(Math.max(currentSelectedIndex + navigate, 0), filterData.length - 1));\r\n    };\r\n    return (\r\n        <div className={'app-multi-select'}>\r\n            <div className={'form-control'}>\r\n                {selectedItems.map(item =>\r\n                    <Badge key={item.id} variant={'info'} onClick={(e: any) => onRemoveHandle(item)}>{item.text}\r\n                        <span className={'fa fa-cancel'}>&times;</span>\r\n                    </Badge>\r\n                )}\r\n                <Form.Control onKeyDown={onKeyDownHandle} autoComplete=\"off\" value={keyword} type={'text'} placeholder={props.placeholder}\r\n                    onBlur={outFocusHandle} onChange={onKeywordChangeHandle} className={props.className}\r\n                    name={props.name} onFocus={onFocusHandle} />\r\n            </div>\r\n            {(isFocus || isInSelection) && selectedItems.length < data.length &&\r\n                <div className={'list-select'} onMouseLeave={onMouseLeaveHandle} onMouseEnter={onMouseEnterHandle}>\r\n                    <ul>\r\n                    {data.filter(item => (item.id.toLocaleLowerCase().indexOf(keyword.toLocaleLowerCase()) >= 0 && selectedItems.filter(select => select.id === item.id).length === 0)).map((item, index) =>\r\n                            <li className={index === currentSelectedIndex ? 'active' : ''} key={item.id} onClick={e => onSelectHandle(item)}>{item.text}</li>)}\r\n                    </ul>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\nexport default SearchMultiSelection;\r\n","import React, {FormEvent, useState} from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport {Breadcrumb, Card, Col} from 'react-bootstrap';\r\nimport {History, Location} from 'history';\r\nimport {Link} from 'react-router-dom';\r\nimport UserModel, {UserRole} from '../../model/UserModel';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {clearError, setError} from '../utils/Error';\r\nimport {putUser, patchUser} from '../../api/user/userApi';\r\nimport LoadingButton from '../utils/LoadingButton';\r\nimport SearchMultiSelection, {SearchMultiSelectionItem} from '../utils/SearchMultiSelection';\r\nimport {StateInterface} from '../../store/store';\r\n\r\ntype UserFormProps = {\r\n    history: History;\r\n    location: Location<{user?: UserModel}>;\r\n}\r\nconst UserForm: React.FC<UserFormProps> = ({history, location}) => {\r\n    const lang = useSelector((state: StateInterface) => state.lang);\r\n    const [validated, setValidated] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const isNew = !(location.state?.user?.email);\r\n    const [user, setUser] = useState<UserModel>(location.state?.user || new UserModel());\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\r\n        setLoading(true);\r\n        setValidated(true);\r\n        clearError(dispatch);\r\n        event.preventDefault();\r\n\r\n        if (!event.currentTarget.checkValidity()) {\r\n            setError(dispatch, lang['error-form-required']);\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        (async () => {\r\n            try {\r\n                isNew ? await putUser(user) : await patchUser(user);\r\n                history.push(`/user/${user.id}`);\r\n            } catch (err) {\r\n                setError(dispatch, err.message);\r\n                setLoading(false);\r\n            }\r\n        })();\r\n    };\r\n\r\n    const handleChange = (element: any) => {\r\n        clearError(dispatch);\r\n        setUser({...user, [element.target.name]: element.target.value});\r\n    };\r\n    const compareArrays = (first: Array<string>, second: Array<string>): boolean => {\r\n        return first.every((e) => second.includes(e)) && second.every((e) => first.includes(e));\r\n    }\r\n    const onChangeRoles = (typesSelected: Array<SearchMultiSelectionItem>, user: any) => {\r\n        clearError(dispatch);\r\n        var roles = typesSelected.map(item => item.value);\r\n\r\n        if (compareArrays(user.roles, roles)) {\r\n            return false;\r\n        }\r\n        setUser({...user, roles: roles});\r\n    };\r\n    return (\r\n        <>\r\n            <Breadcrumb>\r\n                <Breadcrumb.Item active>\r\n                    <Link to={'/'}>Dashboard</Link>\r\n                </Breadcrumb.Item>\r\n                <Breadcrumb.Item active>\r\n                    <Link to={'/user'}>{lang['user']}</Link>\r\n                </Breadcrumb.Item>\r\n                {!isNew &&\r\n                    <Breadcrumb.Item active>\r\n                        <Link to={`/user/${user.id}`}>{user.firstName} {user.lastName}</Link>\r\n                    </Breadcrumb.Item>\r\n                }\r\n                <Breadcrumb.Item active>\r\n                    {!isNew ? lang['edit'] : lang['new']}\r\n                </Breadcrumb.Item>\r\n            </Breadcrumb>\r\n            <h2>{!isNew ? lang['edit'] : lang['new']} {lang['user']}</h2>\r\n            <Card>\r\n                <Card.Body>\r\n                    <Form noValidate validated={validated} onSubmit={handleSubmit} onChange={(e: FormEvent<HTMLFormElement>) => {handleChange(e)}}>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col}>\r\n                                <Form.Label>{lang['first-name']}</Form.Label>\r\n                                <Form.Control autoComplete={'off'} required name={'firstName'} defaultValue={user.firstName} />\r\n                            </Form.Group>\r\n                            <Form.Group as={Col}>\r\n                                <Form.Label>{lang['last-name']}</Form.Label>\r\n                                <Form.Control autoComplete={'off'} required name={'lastName'} defaultValue={user.lastName} />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Group>\r\n                            <Form.Label>Email</Form.Label>\r\n                            <Form.Control autoComplete={'off'} required type={'email'} name={'email'} defaultValue={user.email} />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>{lang['phone-number']}</Form.Label>\r\n                            <Form.Control autoComplete={'off'} required name={'phone'} defaultValue={user.phone} />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>{lang['role']}</Form.Label>\r\n                            <SearchMultiSelection\r\n                                data={Object.entries(UserRole).map(item => ({id: item[0], text: lang[item[1]], value: item[0]}))}\r\n                                placeholder={lang['role']}\r\n                                onChange={(typesSelected: Array<SearchMultiSelectionItem>) => {onChangeRoles(typesSelected, user)}}\r\n                                selected={user.roles.map(role => ({id: role, text: lang[role], value: role}))}\r\n                            />\r\n                        </Form.Group>\r\n                        <LoadingButton loading={loading}>{lang['save']}</LoadingButton>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default UserForm;\r\n","import React from 'react';\r\nimport {Modal, Button} from 'react-bootstrap';\r\nimport {useSelector} from \"react-redux\";\r\nimport {StateInterface} from \"../../store/store\";\r\n\r\n\r\ntype ConfirmDialogProps = {\r\n    message: string;\r\n    onOkAction: (item: any) => any;\r\n    onCancelAction: (item: any) => any;\r\n    okText?: string,\r\n    cancelText?: string,\r\n    confirmText?: string,\r\n    item: any,\r\n    isDisplay: boolean\r\n}\r\n\r\nconst ConfirmDialog: React.FC<ConfirmDialogProps> = (props) => {\r\n    const lang = useSelector((state: StateInterface) => state.lang);\r\n    const onCloseHandle = () => {\r\n        props.onCancelAction(props.item);\r\n    }\r\n    const onOkHandle = () => {\r\n        props.onOkAction(props.item);\r\n    }\r\n    return (\r\n        <>\r\n            <Modal show={props.isDisplay} onHide={onCloseHandle}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{props.confirmText || lang['confirm']}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>{props.message}</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={onCloseHandle}>\r\n                        {props.cancelText || lang['cancel']}\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={onOkHandle}>\r\n                        {props.okText || lang['ok']}\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ConfirmDialog;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {RouteComponentProps} from 'react-router';\r\nimport {Breadcrumb, ButtonToolbar, Card, Badge, Button} from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport UserModel from '../../model/UserModel';\r\nimport {deleteUser, getUser} from '../../api/user/userApi';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {StateInterface} from '../../store/store';\r\nimport {setError} from \"../utils/Error\";\r\nimport ConfirmDialog from \"../utils/ConfirmDialog\";\r\n\r\nconst User: React.FC<RouteComponentProps<{id: string}>> = ({match, history}) => {\r\n    const [user, setUser] = useState(new UserModel());\r\n    const lang = useSelector((state: StateInterface) => state.lang);\r\n    const [isDisplayConfirmDelete, setIsDisplayConfirmDelete] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const handleShowModal = () => setIsDisplayConfirmDelete(true);\r\n    const handleCloseModal = () => setIsDisplayConfirmDelete(false);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const response = await getUser(match.params.id);\r\n            setUser(response.data)\r\n        })();\r\n    }, [match]);\r\n\r\n    const deleteUserHandler = (item: any) => {\r\n        (async () => {\r\n            try {\r\n                await deleteUser(user);\r\n                history.push('/user');\r\n            } catch (err) {\r\n                setError(dispatch, err.message);\r\n            }\r\n        })();\r\n        handleCloseModal();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Breadcrumb>\r\n                <Breadcrumb.Item active>\r\n                    <Link to={'/'}>Dashboard</Link>\r\n                </Breadcrumb.Item>\r\n                <Breadcrumb.Item active>\r\n                    <Link to={'/user'}>{lang['user']}</Link>\r\n                </Breadcrumb.Item>\r\n                <Breadcrumb.Item active>\r\n                    {user.firstName} {user.lastName}\r\n                </Breadcrumb.Item>\r\n            </Breadcrumb>\r\n\r\n            <ButtonToolbar className={'actions float-right'} >\r\n                <Button className=\"btn btn-danger\" onClick={handleShowModal}>{lang['delete']} {lang['user']}</Button>\r\n                <Link className=\"btn btn-primary\" to={{pathname: `/user/edit/${user.id}`, state: {user: user}}}>{lang['edit']} {lang['user']}</Link>\r\n            </ButtonToolbar>\r\n            <h2>{user.firstName} {user.lastName}</h2>\r\n            <Card>\r\n                <Card.Body>\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\">{lang['full-name']}:</dt>\r\n                        <dd className=\"col-sm-9\">{user.firstName} {user.lastName}</dd>\r\n                        <dt className=\"col-sm-3\">Email:</dt>\r\n                        <dd className=\"col-sm-9\">{user.email}</dd>\r\n                        <dt className=\"col-sm-3\">{lang['phone-number']}:</dt>\r\n                        <dd className=\"col-sm-9\">{user.phone}</dd>\r\n                        <dt className=\"col-sm-3\">{lang['role']}:</dt>\r\n                        <dd className=\"col-sm-9\">\r\n                            {user.roles.map((item, key) => (\r\n                                <><Badge key={key} variant={'info'}>{lang[item]}</Badge> <br /></>\r\n                            ))}\r\n                        </dd>\r\n                    </dl>\r\n                </Card.Body>\r\n            </Card>\r\n            <ConfirmDialog item={user} message={lang['delete'] + \" \" + lang['user'] + \" \" + user.firstName + \" \" + user.lastName + \" ?\"} isDisplay={isDisplayConfirmDelete} onCancelAction={handleCloseModal} onOkAction={deleteUserHandler} />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport {Row, Col, Pagination as Paginator} from 'react-bootstrap';\r\n\r\nexport class PaginationFilter {\r\n    page = 1;\r\n    limit = 100;\r\n    constructor(page = 1, limit = 100) {\r\n        this.page = page;\r\n        this.limit = limit;\r\n    }\r\n}\r\n\r\nclass PaginationProps {\r\n    pagination?: PaginationFilter = new PaginationFilter();\r\n    onClickHandle: any;\r\n    maxPage?: number = 0;\r\n}\r\n\r\nconst Pagination: React.FC<PaginationProps> = ({onClickHandle, pagination, maxPage}) => {\r\n\r\n    const onPrevClickHandle = () => {\r\n        if (pagination && pagination.page > 1) {\r\n            pagination.page -= 1;\r\n        }\r\n        onClickHandle(pagination);\r\n    };\r\n    const onNextClickHandle = () => {\r\n        if (pagination && (maxPage === undefined || maxPage === 0 || pagination.page < maxPage)) {\r\n            pagination.page += 1;\r\n        }\r\n        onClickHandle(pagination);\r\n    };\r\n    return (\r\n        <Row>\r\n            <Col md={{span: 4, offset: 8}}>\r\n                <Paginator style={{float: 'right'}}>\r\n                    <div onClick={onPrevClickHandle}><Paginator.Prev /></div>\r\n                    <div><Paginator.Item>{pagination?.page || 1}</Paginator.Item></div>\r\n                    <div onClick={onNextClickHandle}><Paginator.Next /></div>\r\n                </Paginator>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\nexport default Pagination;\r\n","import {PaginationFilter} from '../../../components/utils/Pagination';\r\nimport {SortOrderBy} from '../../../components/utils/SortOrder';\r\n\r\n\r\nclass MasterFilter {\r\n    keyword?: string;\r\n    pagination?: PaginationFilter = new PaginationFilter();\r\n    sortBy: Array<SortOrderBy> = [];\r\n}\r\n\r\nexport default MasterFilter;\r\n","import MasterFilter from './master/MasterFilter';\r\n\r\nclass UserFilter extends MasterFilter {\r\n    roles: Array<string> = [];\r\n}\r\nexport default UserFilter;\r\n","import React, {useState, useRef} from 'react';\r\n\r\nimport {Overlay, Tooltip} from 'react-bootstrap';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faEllipsisV} from '@fortawesome/free-solid-svg-icons';\r\nimport {IconProp} from '@fortawesome/fontawesome-svg-core';\r\n\r\nexport interface MenuIconInterface {\r\n    text: string;\r\n    icon: IconProp;\r\n    action: (entity: any) => any;\r\n}\r\ntype ThreedotsMenuProps = {\r\n    menu: Array<MenuIconInterface>,\r\n    entity: any\r\n}\r\n\r\nconst ThreedotsMenu: React.FC<ThreedotsMenuProps> = (props: ThreedotsMenuProps) => {\r\n    const [isDislay, setIsDisplay] = useState(false);\r\n    const target = useRef(null);\r\n    const menuList = props.menu || [];\r\n\r\n    return (<>\r\n        {menuList.length > 0 &&\r\n            <>\r\n                <div className={'threedot'} ref={target} onClick={() => setIsDisplay(!isDislay)}>\r\n                    <FontAwesomeIcon icon={faEllipsisV} />\r\n                </div>\r\n                <Overlay target={target.current} show={isDislay} placement={'bottom-end'} >\r\n                    {(propsOver: any) => (\r\n                        <Tooltip id={'threedot-content'} {...propsOver} onMouseLeave={e => setIsDisplay(false)}>\r\n                            <ul className={'threedot-menu-content'}>\r\n                                {menuList.map((menu, k) =>\r\n                                    <li className={'text-left'} key={k} onClick={() => {setIsDisplay(false); menu.action(props.entity)}} title={menu.text}><FontAwesomeIcon icon={menu.icon} /> {menu.text}</li>\r\n                                )}\r\n                            </ul>\r\n                        </Tooltip>\r\n                    )}\r\n                </Overlay>\r\n            </>\r\n        }\r\n    </>\r\n    );\r\n};\r\n\r\nexport default ThreedotsMenu;\r\n","import {v4} from 'uuid';\r\nimport QuestionModel from './QuestionModel';\r\nimport SurveyResponseModel from './SurveyResponseModel';\r\n\r\nexport enum SurveyStatus {\r\n    STATUS_OPEN = 'STATUS_OPEN',\r\n    STATUS_CLOSED = 'STATUS_CLOSED'\r\n}\r\n\r\nclass SurveyModel {\r\n    id: string;\r\n    email: string = '';\r\n    title: string = '';\r\n    description: string = '';\r\n    note: string = '';\r\n    status: string = SurveyStatus.STATUS_OPEN;\r\n    questions: Array<QuestionModel> = []\r\n    surveyResponses: Array<SurveyResponseModel> = [];\r\n    constructor() {\r\n        this.id = v4();\r\n    }\r\n}\r\n\r\nexport default SurveyModel;\r\n","class FbsString {\r\n    random(length = 0): string {\r\n        return Math.round((Math.pow(36, length + 1) - Math.random() * Math.pow(36, length))).toString(36).slice(1);\r\n    }\r\n}\r\nexport default new FbsString();","import React, {useEffect, useState} from 'react';\r\nimport {Route, Link, RouteComponentProps, Switch} from 'react-router-dom'\r\nimport {Breadcrumb, Card, Table, ButtonToolbar, Row, Col, Form} from 'react-bootstrap';\r\nimport {getUsers, deleteUser, adminGeneratePassword} from '../../api/user/userApi';\r\nimport UserModel from '../../model/UserModel';\r\nimport UserForm from './UserForm';\r\nimport User from './User';\r\nimport UserFilter from '../../model/filter/UserFilter';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {StateInterface} from '../../store/store';\r\nimport {faEdit, faTrashAlt, faKey} from '@fortawesome/free-solid-svg-icons';\r\nimport ThreedotsMenu, {MenuIconInterface} from '../utils/ThreedotsMenu';\r\nimport ConfirmDialog from '../utils/ConfirmDialog';\r\nimport {ElementType} from \"../utils/FormInputModal\";\r\nimport FormInputModal from \"../utils/FormInputModal\";\r\nimport {setError} from \"../utils/Error\";\r\nimport FbsString from '../../utils/string';\r\n\r\nconst Users: React.FC<RouteComponentProps> = ({match, history}) => {\r\n    const [users, setUsers] = useState<Array<UserModel>>([]);\r\n    const [keyword, setKeyword] = useState('');\r\n    const lang = useSelector((state: StateInterface) => state.lang);\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    const [filter, setFilter] = useState<UserFilter>({...(new UserFilter()), keyword: keyword});\r\n    const [currentSelected, setCurrentSelected] = useState<UserModel | null>(null);\r\n    const [isConfirmDelete, setIsConfirmDelete] = useState(false);\r\n    const [isDisplayFormInput, setIsDisplayFormInput] = useState(false);\r\n    const [password, setPassword] = useState('');\r\n    const [isGeneratingPassword, setIsGeneratingPassword] = useState(false);\r\n    const [randomPassword, setRandomPassword] = useState<string>(lang['random']);\r\n    const dispatch = useDispatch();\r\n\r\n    //menu threedot\r\n    const deleteEntity = (entity: any) => {\r\n        setCurrentSelected({...entity});\r\n    }\r\n    const editEntity = (entity: any) => {\r\n        history.push(`/user/edit/${entity.id}`, {user: entity});\r\n    }\r\n    const generatePassword = (entity: any) => {\r\n        setCurrentSelected({...entity});\r\n        setIsGeneratingPassword(true);\r\n    }\r\n\r\n    const generatePasswordHandler = () => {\r\n        (async () => {\r\n            try {\r\n                await adminGeneratePassword({\r\n                    'id': currentSelected?.id,\r\n                    'password': password\r\n                });\r\n                window.location.reload();\r\n            } catch (err) {\r\n                setError(dispatch, err.message);\r\n            }\r\n            setIsDisplayFormInput(false);\r\n        })();\r\n    }\r\n    const onPasswordChange = (value: string) => {\r\n        setPassword(value);\r\n    }\r\n    const generateRandomString = () => {\r\n        const password = FbsString.random(6);\r\n        setPassword(password);\r\n        setRandomPassword(password);\r\n    }\r\n    const menuAction: Array<MenuIconInterface> = [\r\n        {icon: faKey, text: lang['generate-password'], action: generatePassword},\r\n        {icon: faEdit, text: lang['edit'], action: editEntity},\r\n        {icon: faTrashAlt, text: lang['delete'], action: deleteEntity}\r\n    ];\r\n    //confirm\r\n    const confirmOk = (item: any) => {\r\n        if (item === null) {\r\n            return;\r\n        }\r\n        (async () => {\r\n            await deleteUser(item);\r\n            setUsers(users.filter(i => i.id !== item.id));\r\n            setCurrentSelected(null);\r\n        })();\r\n    }\r\n    const confirmCancel = (item: any) => {\r\n        setCurrentSelected(null);\r\n    }\r\n    //state\r\n    useEffect(() => {\r\n        setIsConfirmDelete(false);\r\n        setIsDisplayFormInput(false);\r\n        setPassword('');\r\n        if (currentSelected !== null) {\r\n            if (isGeneratingPassword) {\r\n                setIsDisplayFormInput(true);\r\n                return\r\n            }\r\n            setIsConfirmDelete(true);\r\n            return;\r\n        }\r\n    }, [currentSelected, isGeneratingPassword]);\r\n    useEffect(() => {\r\n        filter.keyword = keyword;\r\n        (async () => {\r\n            const response = await getUsers(filter);\r\n            setUsers(response.data)\r\n        })();\r\n    }, [filter, keyword]);\r\n    const UserList = <>\r\n        <Breadcrumb>\r\n            <Breadcrumb.Item active>\r\n                <Link to={'/'}>Dashboard</Link>\r\n            </Breadcrumb.Item>\r\n            <Breadcrumb.Item active>\r\n                {lang['user']}\r\n            </Breadcrumb.Item>\r\n        </Breadcrumb>\r\n        <ButtonToolbar className={'float-right'}>\r\n            <Link className=\"btn btn-primary\" to={'/user/new'}>{lang['new']} {lang['user']}</Link>\r\n        </ButtonToolbar>\r\n        <h2>{lang['user']}</h2>\r\n        <Row>\r\n            <Col xs lg={{span: 4, offset: 8}}>\r\n                <Form.Control type={'text'} placeholder={lang['search']} name={'keyword'} defaultValue={filter.keyword} onChange={(e: any) => setKeyword(e.target.value)} />\r\n            </Col>\r\n        </Row>\r\n        <Card>\r\n            <Table responsive>\r\n                <thead>\r\n                    <tr>\r\n                        {['Email', lang['role'], ''].map((item, key) => <th key={key}>{item}</th>)}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {users.map((item, key) => (\r\n                        <tr key={key}>\r\n                            <td><Link to={`${match.url}/${item.id}`}>{item.email}</Link></td>\r\n                            <td><code>{item.roles.map(i => lang[i]).join(', ')}</code></td>\r\n                            <td><ThreedotsMenu menu={menuAction} entity={item} /></td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        </Card>\r\n        <ConfirmDialog message={lang['delete'] + \" \" + lang['user'] + \" \" + currentSelected?.firstName + \" \" + currentSelected?.lastName + \" ?\"} isDisplay={isConfirmDelete} onCancelAction={confirmCancel} onOkAction={confirmOk} item={currentSelected} />\r\n        <FormInputModal item={currentSelected} title={lang['generate-password']} elements={[\r\n            {\r\n                value: password,\r\n                type: ElementType.PASSWORD,\r\n                name: 'generate-password',\r\n                onChange: onPasswordChange\r\n            },\r\n            {\r\n                value: randomPassword,\r\n                type: ElementType.LINK_ACTION,\r\n                name: 'generate-password-link',\r\n                onChange: () => {},\r\n                clickAction: generateRandomString\r\n\r\n            }\r\n        ]} isDisplay={isDisplayFormInput} onCancelAction={(item: any) => setIsDisplayFormInput(false)} onOkAction={generatePasswordHandler} />\r\n    </>;\r\n\r\n    return (\r\n        <div>\r\n            <Route exact path={match.path} render={() => UserList} />\r\n            <Switch>\r\n                <Route path={`${match.path}/new`} component={UserForm} />\r\n                <Route path={`${match.path}/edit/:id`} component={UserForm} />\r\n                <Route path={`${match.path}/:id`} component={User} />\r\n            </Switch>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Users;\r\n","import React, {FormEvent, useState, useEffect} from 'react';\r\nimport {ButtonGroup, ButtonToolbar, Card, Form} from 'react-bootstrap';\r\nimport {RouteComponentProps} from 'react-router';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {NavLink} from 'react-router-dom';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport client from '../../api/client';\r\nimport {ERROR_GENERAL} from '../../store/types';\r\nimport LoadingButton from '../utils/LoadingButton';\r\nimport {StateInterface} from '../../store/store';\r\n\r\nconst PasswordReset: React.FC<RouteComponentProps<{token: string}>> = ({history, match}) => {\r\n    const lang = useSelector((state: StateInterface) => state.lang);\r\n    const [password, setPassword] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n    const [failed, setFailed] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        client.logout();\r\n    }, []);\r\n\r\n    const submit = async (e: FormEvent) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        dispatch({type: ERROR_GENERAL, error: ''});\r\n        setFailed(false);\r\n        try {\r\n            await client.resetPassword(match.params.token, password);\r\n            setSuccess(true);\r\n        } catch (err) {\r\n            dispatch({type: ERROR_GENERAL, error: err.message});\r\n            setFailed(true);\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const canSubmit = (): boolean => {\r\n        return password.length >= 6 && !loading;\r\n    };\r\n\r\n    return (\r\n        <div className={'login-box'}>\r\n            <h2 className={'text-center'}>{lang['reset-password']}</h2>\r\n            <Card>\r\n                <Card.Body>\r\n                    {success && <p>{lang['reset-password-success']} <a href={'/login'}>{lang['login-now']}</a></p>}\r\n                    {!success && <Form onSubmit={submit}>\r\n                        <Form.Group>\r\n                            <Form.Label>{lang['password']}</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder={lang['new-password']} onChange={(e: any) => setPassword(e.currentTarget.value)} />\r\n                            {!canSubmit() && <Form.Text>{lang['password-invalid']}</Form.Text>}\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <ButtonToolbar>\r\n                                <ButtonGroup>\r\n                                    <LoadingButton loading={loading} disabled={!canSubmit()}>{lang['reset']}</LoadingButton>\r\n                                </ButtonGroup>\r\n                                {failed && <ButtonGroup>\r\n                                    <Nav.Link as={NavLink} to={'/login'}>{lang['login']}</Nav.Link>\r\n                                </ButtonGroup>}\r\n                            </ButtonToolbar>\r\n                        </Form.Group>\r\n                    </Form>}\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PasswordReset;\r\n","import React, {useState} from 'react'\r\nimport {Row, Col, ListGroup, Collapse} from 'react-bootstrap';\r\nimport client from '../../api/client';\r\nimport {Link} from 'react-router-dom';\r\nimport {useSelector} from 'react-redux';\r\nimport {StateInterface} from '../../store/store';\r\nimport {faCaretDown} from '@fortawesome/free-solid-svg-icons';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nconst TopBar: React.FC = () => {\r\n    const lang = useSelector((state: StateInterface) => state.lang);\r\n    const [isDisplay, setIsDisplay] = useState(false);\r\n    const onMouseLeaveTopBar = () => {\r\n        setIsDisplay(false);\r\n    }\r\n    return (\r\n        <header className={'top-bar p-1 pl-5 pr-5 fixed-top'}>\r\n            <Row onMouseLeave={(e: any) => onMouseLeaveTopBar()}>\r\n                <Col xs lg={{span: 7, offset: 5}}>\r\n                    <div className={'text-right'}>\r\n                        <Row>\r\n                            <Col xs lg={{span: 4, offset: 8}} className={'p-0 pt-1 text-left'}>\r\n                                <Link to={'#'} className={'text-white btn btn-primary'} onClick={e => setIsDisplay(!isDisplay)}> {client.getUser()?.email || ''} <FontAwesomeIcon icon={faCaretDown} /></Link>\r\n                                <Collapse in={isDisplay}>\r\n                                    <ListGroup className={'position-fixed'}>\r\n                                        <ListGroup.Item><Link to={{pathname: `/profile`, state: {profileId: client.getUser().id}}}>{lang['profile']}</Link></ListGroup.Item>\r\n                                        <ListGroup.Item><Link to={{pathname: `/change-password`, state: {profileId: client.getUser().id}}}>{lang['change-password']}</Link></ListGroup.Item>\r\n                                        <ListGroup.Item><Link to={'/login'}>{lang['logout']}</Link></ListGroup.Item>\r\n                                    </ListGroup>\r\n                                </Collapse>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </header >\r\n    );\r\n};\r\n\r\nexport default TopBar;\r\n","import React, {FormEvent, useEffect, useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {Breadcrumb, Card, Col} from 'react-bootstrap';\r\nimport {StateInterface} from '../../store/store';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {clearError, setError} from \"../utils/Error\";\r\nimport {getUser, patchUser} from \"../../api/user/userApi\";\r\nimport {Form} from \"react-bootstrap\";\r\nimport UserModel from \"../../model/UserModel\";\r\nimport {History, Location} from \"history\";\r\nimport FormInputModal, {ElementType} from \"../utils/FormInputModal\";\r\nimport LoadingButton from \"../utils/LoadingButton\";\r\n\r\ntype ProfileFormProps = {\r\n    history: History;\r\n    location: Location<{profileId: string}>;\r\n}\r\nconst Profile: React.FC<ProfileFormProps> = ({history, location}) => {\r\n    const lang = useSelector((state: StateInterface) => state.lang);\r\n    const [validated, setValidated] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const [profile, setProfile] = useState(new UserModel());\r\n    const [isDisplayFormInput, setIsDisplayFormInput] = useState(false);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const response = await getUser(location.state.profileId);\r\n            setProfile(response.data)\r\n        })();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\r\n        setValidated(true);\r\n        clearError(dispatch);\r\n        event.preventDefault();\r\n\r\n        if (!event.currentTarget.checkValidity()) {\r\n            setError(dispatch, lang['error-form-required']);\r\n            return;\r\n        }\r\n\r\n        setIsDisplayFormInput(true);\r\n    };\r\n\r\n    const updateProfileHandler = (item: any) => {\r\n        setIsDisplayFormInput(false);\r\n        if (!profile.password || profile.password === '') {\r\n            setError(dispatch, lang['password-required']);\r\n            return;\r\n        }\r\n        (async () => {\r\n            try {\r\n                await patchUser(profile);\r\n                window.location.reload();\r\n            } catch (err) {\r\n                setError(dispatch, err.message);\r\n            }\r\n        })();\r\n    };\r\n\r\n    const handleChange = (element: any) => {\r\n        clearError(dispatch);\r\n        setProfile({...profile, [element.target.name]: element.target.value});\r\n    };\r\n\r\n    const onPasswordChange = (value: string) => {\r\n        setProfile({...profile, password: value});\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Breadcrumb>\r\n                <Breadcrumb.Item active>\r\n                    <Link to={'/'}>Dashboard</Link>\r\n                </Breadcrumb.Item>\r\n                <Breadcrumb.Item active>\r\n                    <Link to={'/user'}>{lang['user']}</Link>\r\n                </Breadcrumb.Item>\r\n                <Breadcrumb.Item active>\r\n                    {lang['profile']}\r\n                </Breadcrumb.Item>\r\n            </Breadcrumb>\r\n            <h2>{lang['profile']}</h2>\r\n            <Card>\r\n                <Card.Body>\r\n                    <Form noValidate validated={validated} onSubmit={handleSubmit} onChange={(e: FormEvent<HTMLFormElement>) => {handleChange(e)}}>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col}>\r\n                                <Form.Label>{lang['first-name']}</Form.Label>\r\n                                <Form.Control autoComplete={'off'} required name={'firstName'} defaultValue={profile.firstName} />\r\n                            </Form.Group>\r\n                            <Form.Group as={Col}>\r\n                                <Form.Label>{lang['last-name']}</Form.Label>\r\n                                <Form.Control autoComplete={'off'} required name={'lastName'} defaultValue={profile.lastName} />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Group>\r\n                            <Form.Label>Email</Form.Label>\r\n                            <Form.Control autoComplete={'off'} readOnly type={'email'} name={'email'} defaultValue={profile.email} />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>{lang['phone-number']}</Form.Label>\r\n                            <Form.Control autoComplete={'off'} required name={'phone'} defaultValue={profile.phone} />\r\n                        </Form.Group>\r\n                        <LoadingButton loading={false}>{lang['save']}</LoadingButton>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n            <FormInputModal item={profile} title={lang['password-confirm']} elements={[{\r\n                value: profile.password || '', required: true, type: ElementType.PASSWORD, name: 'form-input-password', onChange: onPasswordChange\r\n            }]} isDisplay={isDisplayFormInput} onCancelAction={(item: any) => setIsDisplayFormInput(false)} onOkAction={updateProfileHandler} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Profile;","class PasswordChangeModel {\r\n    id: string = '';\r\n    oldPassword: string = '';\r\n    newPassword: string = '';\r\n    newPasswordConfirm: string = '';\r\n}\r\n\r\nexport default PasswordChangeModel;","import React from 'react';\r\nimport {Modal, Button} from 'react-bootstrap';\r\nimport {useSelector} from \"react-redux\";\r\nimport {StateInterface} from \"../../store/store\";\r\n\r\n\r\ntype AlertDialogProps = {\r\n    message: string;\r\n    title?: string,\r\n    onCloseAction: (item: any) => any;\r\n    okText?: string,\r\n    item: any,\r\n    isDisplay: boolean\r\n}\r\n\r\nconst AlertDialog: React.FC<AlertDialogProps> = (props) => {\r\n    const lang = useSelector((state: StateInterface) => state.lang);\r\n\r\n    const onOkHandle = () => {\r\n        props.onCloseAction(props.item);\r\n    };\r\n    return (\r\n        <>\r\n            <Modal show={props.isDisplay} onHide={onOkHandle}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{props.title || lang['confirm']}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>{props.message}</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" onClick={onOkHandle}>\r\n                        {props.okText || lang['ok']}\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AlertDialog;\r\n","import {History, Location} from \"history\";\r\nimport React, {FormEvent, useEffect, useState} from \"react\";\r\nimport {Breadcrumb, Card, Form, Col} from \"react-bootstrap\";\r\nimport {Link} from \"react-router-dom\";\r\nimport LoadingButton from \"../utils/LoadingButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StateInterface} from \"../../store/store\";\r\nimport {clearError, setError} from \"../utils/Error\";\r\nimport PasswordChangeModel from \"../../model/PasswordChangeModel\";\r\nimport {changePassword} from \"../../api/user/userApi\";\r\nimport AlertDialog from \"../utils/AlertDialog\";\r\n\r\ntype ChangePasswordFormProps = {\r\n    history: History;\r\n    location: Location<{profileId: string}>;\r\n}\r\nconst ChangePassword: React.FC<ChangePasswordFormProps> = ({history, location}) => {\r\n    const lang = useSelector((state: StateInterface) => state.lang);\r\n    const [validated, setValidated] = useState(false);\r\n    const [passwordChange, setPasswordChange] = useState(new PasswordChangeModel());\r\n    const [loading, setLoading] = useState(false);\r\n    const [isShowAlert, setIsShowAlert] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        setPasswordChange({...passwordChange, id: location.state.profileId});\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleChange = (element: any) => {\r\n        clearError(dispatch);\r\n        setPasswordChange({...passwordChange, [element.target.name]: element.target.value});\r\n    };\r\n\r\n    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\r\n        setLoading(true);\r\n        setValidated(true);\r\n        clearError(dispatch);\r\n        event.preventDefault();\r\n\r\n        if (!event.currentTarget.checkValidity()) {\r\n            setError(dispatch, lang['error-form-required']);\r\n            setLoading(false);\r\n            return;\r\n        }\r\n        if(passwordChange.newPassword !== passwordChange.newPasswordConfirm) {\r\n            setError(dispatch, lang['different-password-confirm']);\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        (async () => {\r\n            try {\r\n                await changePassword(passwordChange);\r\n                setLoading(false);\r\n                setIsShowAlert(true);\r\n            } catch (err) {\r\n                setError(dispatch, err.message);\r\n                setLoading(false);\r\n            }\r\n        })();\r\n    };\r\n\r\n    const onCloseAlertAction = () => {\r\n        setIsShowAlert(false);\r\n        history.push('/login');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Breadcrumb>\r\n                <Breadcrumb.Item active>\r\n                    <Link to={'/'}>Dashboard</Link>\r\n                </Breadcrumb.Item>\r\n                <Breadcrumb.Item active>\r\n                    <Link to={'/user'}>{lang['user']}</Link>\r\n                </Breadcrumb.Item>\r\n                <Breadcrumb.Item active>\r\n                    {lang['change-password']}\r\n                </Breadcrumb.Item>\r\n            </Breadcrumb>\r\n            <h2>{lang['change-password']}</h2>\r\n            <Card>\r\n                <Card.Body>\r\n                    <Form noValidate validated={validated} onSubmit={handleSubmit} onChange={(e: FormEvent<HTMLFormElement>) => {handleChange(e)}}>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col}>\r\n                                <Form.Label>{lang['old-password']}</Form.Label>\r\n                                <Form.Control autoComplete={'off'} required name={'oldPassword'} type={'password'} defaultValue={\"\"} />\r\n                            </Form.Group>\r\n                            <Form.Group as={Col}>\r\n                                <Form.Label>{lang['new-password']}</Form.Label>\r\n                                <Form.Control autoComplete={'off'} required name={'newPassword'} type={'password'} defaultValue={\"\"} />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        <Form.Group>\r\n                            <Form.Label>{lang['confirm'] + \" \" + lang['new-password'] + \" \" + lang['again']}</Form.Label>\r\n                            <Form.Control autoComplete={'off'} required type={'password'} name={'newPasswordConfirm'} defaultValue={\"\"} />\r\n                        </Form.Group>\r\n                        <LoadingButton loading={loading}>{lang['save']}</LoadingButton>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n            <AlertDialog item={passwordChange} message={lang['alert-modal-default-message'] + \" \" + lang['logout']} title={lang['change-password-success']} isDisplay={isShowAlert} onCloseAction={onCloseAlertAction} />\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default ChangePassword;","import MasterFilter from './master/MasterFilter';\r\n\r\nclass SurveyFilter extends MasterFilter {\r\n}\r\nexport default SurveyFilter;\r\n","import client from '../client';\r\nimport {CollectionResponse, Response, encode} from '../api';\r\nimport SurveyModel from '../../model/SurveyModel';\r\nimport SurveyFilter from '../../model/filter/SurveyFilter';\r\n\r\nexport const getSurvey = async (id: string): Promise<Response<SurveyModel>> => {\r\n    return await client.get(`/survey/${id}`);\r\n};\r\n\r\nexport const getSurveys = async (filter: SurveyFilter): Promise<CollectionResponse<SurveyModel>> => {\r\n    return await client.get(`/surveys?filter=${encode(filter)}`);\r\n};\r\n\r\nexport const putSurvey = async (payload: SurveyModel) => {\r\n    return await client.put(`/survey/${payload.id}`, payload);\r\n};\r\n\r\nexport const patchSurvey = async (payload: SurveyModel) => {\r\n    return await client.patch(`/survey/${payload.id}`, payload);\r\n};\r\n\r\nexport const deleteSurvey = async (payload: SurveyModel) => {\r\n    return await client.delete(`/survey/${payload.id}`);\r\n};\r\n","import {v4} from 'uuid';\r\nimport SurveyModel from './SurveyModel';\r\nimport OptionModel from './OptionModel';\r\n\r\nexport enum QuestionType {\r\n    TYPE_INPUT_TEXT = 'TYPE_INPUT_TEXT',\r\n    TYPE_INPUT_RADIO = 'TYPE_INPUT_RADIO',\r\n    TYPE_INPUT_CHECKBOX = 'TYPE_INPUT_CHECKBOX',\r\n    TYPE_DROPDOWN_BOX = 'TYPE_DROPDOWN_BOX',\r\n    TYPE_INPUT_TEXT_AREA = 'TYPE_INPUT_TEXT_AREA'\r\n}\r\nclass QuestionModel {\r\n    id: string;\r\n    label: string = '';\r\n    type: string = QuestionType.TYPE_INPUT_TEXT;\r\n    survey?: SurveyModel | null;\r\n    options: Array<OptionModel> = [];\r\n    note: string = '';\r\n\r\n\r\n    constructor() {\r\n        this.id = v4();\r\n    }\r\n}\r\n\r\nexport default QuestionModel;\r\n","import {v4} from 'uuid';\r\nimport QuestionModel from './QuestionModel';\r\n\r\nclass OptionModel {\r\n    id: string;\r\n    text: string = '';\r\n    value: string = '';\r\n    question?: QuestionModel | null;\r\n\r\n    constructor() {\r\n        this.id = v4();\r\n    }\r\n}\r\n\r\nexport default OptionModel;\r\n","import React, {FormEvent, useState} from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport {Breadcrumb, Card, Col, Button, Row} from 'react-bootstrap';\r\nimport {History, Location} from 'history';\r\nimport {Link} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {clearError, setError} from '../utils/Error';\r\nimport LoadingButton from '../utils/LoadingButton';\r\nimport {StateInterface} from '../../store/store';\r\nimport SurveyModel from '../../model/SurveyModel';\r\nimport {putSurvey, patchSurvey} from '../../api/survey/surveyApi';\r\nimport QuestionModel, {QuestionType} from '../../model/QuestionModel';\r\nimport {faPlus, faMinus, faTimes} from '@fortawesome/free-solid-svg-icons';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport OptionModel from '../../model/OptionModel';\r\n\r\ntype SurveyFormProps = {\r\n    history: History;\r\n    location: Location<{survey?: SurveyModel}>;\r\n}\r\nconst SurveyForm: React.FC<SurveyFormProps> = ({history, location}) => {\r\n    const lang = useSelector((state: StateInterface) => state.lang);\r\n    const [validated, setValidated] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const isNew = !(location.state?.survey?.email);\r\n    const [survey, setSurvey] = useState<SurveyModel>(location.state?.survey || new SurveyModel());\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\r\n        setLoading(true);\r\n        setValidated(true);\r\n        clearError(dispatch);\r\n        event.preventDefault();\r\n\r\n        if (!event.currentTarget.checkValidity()) {\r\n            setError(dispatch, lang['error-form-required']);\r\n            setLoading(false);\r\n            return;\r\n        }\r\n        (async () => {\r\n            try {\r\n                isNew ? await putSurvey(survey) : await patchSurvey(survey);\r\n                history.push(`/survey/${survey.id}`);\r\n            } catch (err) {\r\n                setError(dispatch, err.message);\r\n                setLoading(false);\r\n            }\r\n        })();\r\n    };\r\n\r\n    const handleEmailChange = (e: any) => {\r\n        clearError(dispatch);\r\n        setSurvey({...survey, email: e.target.value});\r\n    };\r\n    const handleTitleChange = (e: any) => {\r\n        clearError(dispatch);\r\n        setSurvey({...survey, title: e.target.value});\r\n    };\r\n    const handleDescriptionChange = (e: any) => {\r\n        clearError(dispatch);\r\n        setSurvey({...survey, description: e.target.value});\r\n    };\r\n    const handleNoteChange = (e: any) => {\r\n        clearError(dispatch);\r\n        setSurvey({...survey, note: e.target.value});\r\n    };\r\n    const onAddQuestionHandler = (e: any) => {\r\n        survey.questions.push(new QuestionModel());\r\n        setSurvey({...survey});\r\n    }\r\n    const onRemoveQuestionHandler = (id: string) => {\r\n        survey.questions = survey.questions.filter(i => i.id !== id);\r\n        setSurvey({...survey});\r\n    }\r\n    const onAddOptionHandler = (q: QuestionModel) => {\r\n        q.options.push(new OptionModel());\r\n        setSurvey({...survey});\r\n    }\r\n    const handleQuestionTitleChange = (q: QuestionModel, e: any) => {\r\n        q.label = e.target.value;\r\n        setSurvey({...survey});\r\n    }\r\n    const handleQuestionTypeChange = (q: QuestionModel, e: any) => {\r\n        q.type = e.target.value;\r\n        if (q.type === QuestionType.TYPE_INPUT_TEXT || q.type === QuestionType.TYPE_INPUT_TEXT_AREA) {\r\n            q.options = [];\r\n        }\r\n        setSurvey({...survey});\r\n    }\r\n    const handleOptionChangeLabel = (o: OptionModel, e: any) => {\r\n        o.text = e.target.value;\r\n        setSurvey({...survey});\r\n    }\r\n    const handleOptionChangeValue = (o: OptionModel, e: any) => {\r\n        o.value = e.target.value;\r\n        setSurvey({...survey});\r\n    }\r\n    const onRemoveOptionHandler = (id: string, q: QuestionModel) => {\r\n        q.options = q.options.filter(i => i.id !== id);\r\n        setSurvey({...survey});\r\n    }\r\n    return (\r\n        <>\r\n            <Breadcrumb>\r\n                <Breadcrumb.Item active>\r\n                    <Link to={'/'}>Dashboard</Link>\r\n                </Breadcrumb.Item>\r\n                <Breadcrumb.Item active>\r\n                    <Link to={'/survey'}>{lang['survey']}</Link>\r\n                </Breadcrumb.Item>\r\n                {!isNew &&\r\n                    <Breadcrumb.Item active>\r\n                        <Link to={`/survey/${survey.id}`}>{survey.id}</Link>\r\n                    </Breadcrumb.Item>\r\n                }\r\n                <Breadcrumb.Item active>\r\n                    {!isNew ? lang['edit'] : lang['new']}\r\n                </Breadcrumb.Item>\r\n            </Breadcrumb>\r\n            <h2>{!isNew ? lang['edit'] : lang['new']} {lang['user']}</h2>\r\n            <Card>\r\n                <Card.Body>\r\n                    <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n                        <Form.Group>\r\n                            <Form.Label>Email</Form.Label>\r\n                            <Form.Control autoComplete={'off'} required type={'email'} name={'email'} onChange={handleEmailChange} defaultValue={survey.email} />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>{lang['survey-title']}</Form.Label>\r\n                            <Form.Control autoComplete={'off'} required type={'text'} name={'title'} onChange={handleTitleChange} defaultValue={survey.title} />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>{lang['survey-description']}</Form.Label>\r\n                            <Form.Control as={'textarea'} autoComplete={'off'} name={'description'} onChange={handleDescriptionChange} defaultValue={survey.description} />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>{lang['survey-note']}</Form.Label>\r\n                            <Form.Control as={'textarea'} autoComplete={'off'} name={'note'} onChange={handleNoteChange} defaultValue={survey.note} />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>{lang['survey-question']}</Form.Label>\r\n                            <Card>\r\n                                <Card.Body>\r\n                                    {survey?.questions.map((q, k) => {\r\n                                        return (\r\n                                            <Row key={k}>\r\n                                                <Col xs={9}>\r\n                                                    <Form.Group>\r\n                                                        <Form.Label>{lang['question-label']}</Form.Label>\r\n                                                        <Form.Control autoComplete={'off'} required type={'text'} name={'q-label'} value={q.label} onChange={(e: any) => handleQuestionTitleChange(q, e)} />\r\n                                                    </Form.Group>\r\n                                                    <Form.Group>\r\n                                                        <Form.Label>{lang['question-type']}</Form.Label>\r\n                                                        <Form.Control as={'select'} autoComplete={'off'} required name={'q-type'} value={q.type} onChange={(e: any) => handleQuestionTypeChange(q, e)}>\r\n                                                            {[QuestionType.TYPE_INPUT_TEXT, QuestionType.TYPE_INPUT_RADIO, QuestionType.TYPE_INPUT_CHECKBOX, QuestionType.TYPE_DROPDOWN_BOX, QuestionType.TYPE_INPUT_TEXT_AREA].map((o, ok) => {\r\n                                                                return (\r\n                                                                    <option value={o} key={ok}>{lang[o]}</option>\r\n                                                                )\r\n                                                            })}\r\n                                                        </Form.Control>\r\n                                                    </Form.Group>\r\n                                                    {(q.type === QuestionType.TYPE_DROPDOWN_BOX ||\r\n                                                        q.type === QuestionType.TYPE_INPUT_CHECKBOX ||\r\n                                                        q.type === QuestionType.TYPE_INPUT_RADIO) &&\r\n                                                        <Form.Group>\r\n                                                            <Form.Label>{lang['question-option']} <span className={'text-primary cursor'} onClick={(e: any) => onAddOptionHandler(q)}><FontAwesomeIcon icon={faPlus} /></span></Form.Label>\r\n\r\n                                                            {q.options.map((option, oKey) => {\r\n                                                                return (\r\n                                                                    <Row key={oKey}>\r\n                                                                        <Col xs={5}>\r\n                                                                            <Form.Group>\r\n                                                                                <Form.Label>{lang['option-label']}</Form.Label>\r\n                                                                                <Form.Control type={'text'} autoComplete={'off'} value={option.text} onChange={(e: any) => handleOptionChangeLabel(option, e)}></Form.Control>\r\n                                                                            </Form.Group>\r\n                                                                        </Col>\r\n                                                                        <Col xs={5}>\r\n                                                                            <Form.Group>\r\n                                                                                <Form.Label>{lang['option-value']}</Form.Label>\r\n                                                                                <Form.Control type={'text'} autoComplete={'off'} value={option.value} onChange={(e: any) => handleOptionChangeValue(option, e)}></Form.Control>\r\n                                                                            </Form.Group>\r\n                                                                        </Col>\r\n                                                                        <Col xs={2}>\r\n                                                                            <Form.Group>\r\n                                                                                <span className={'text-danger cursor'} onClick={(e: any) => onRemoveOptionHandler(option.id, q)}><FontAwesomeIcon icon={faMinus} /></span>\r\n                                                                            </Form.Group>\r\n                                                                        </Col>\r\n                                                                    </Row>\r\n                                                                )\r\n                                                            })\r\n                                                            }\r\n                                                        </Form.Group>}\r\n                                                </Col>\r\n                                                <Col xs={3}>\r\n                                                    <span className={'text-danger cursor'} onClick={(e: any) => onRemoveQuestionHandler(q.id)}><FontAwesomeIcon icon={faTimes} /></span>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        )\r\n                                    })}\r\n                                    <div className={'text-right'}>\r\n                                        <Button className={'btn-success'} onClick={onAddQuestionHandler}><FontAwesomeIcon icon={faPlus} /></Button>\r\n                                    </div>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Form.Group>\r\n                        <LoadingButton loading={loading}>{lang['save']}</LoadingButton>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default SurveyForm;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {RouteComponentProps} from 'react-router';\r\nimport {Breadcrumb, ButtonToolbar, Card, Button} from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {StateInterface} from '../../store/store';\r\nimport {setError} from \"../utils/Error\";\r\nimport ConfirmDialog from \"../utils/ConfirmDialog\";\r\nimport SurveyModel from '../../model/SurveyModel';\r\nimport {getSurvey, deleteSurvey} from '../../api/survey/surveyApi';\r\n\r\nconst Survey: React.FC<RouteComponentProps<{id: string}>> = ({match, history}) => {\r\n    const [survey, setSurvey] = useState(new SurveyModel());\r\n    const lang = useSelector((state: StateInterface) => state.lang);\r\n    const [isDisplayConfirmDelete, setIsDisplayConfirmDelete] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const handleShowModal = () => setIsDisplayConfirmDelete(true);\r\n    const handleCloseModal = () => setIsDisplayConfirmDelete(false);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const response = await getSurvey(match.params.id);\r\n            setSurvey(response.data)\r\n        })();\r\n    }, [match]);\r\n\r\n    const deleteSurveyHandler = (item: any) => {\r\n        (async () => {\r\n            try {\r\n                await deleteSurvey(survey);\r\n                history.push('/survey');\r\n            } catch (err) {\r\n                setError(dispatch, err.message);\r\n            }\r\n        })();\r\n        handleCloseModal();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Breadcrumb>\r\n                <Breadcrumb.Item active>\r\n                    <Link to={'/'}>Dashboard</Link>\r\n                </Breadcrumb.Item>\r\n                <Breadcrumb.Item active>\r\n                    <Link to={'/survey'}>{lang['survey']}</Link>\r\n                </Breadcrumb.Item>\r\n                <Breadcrumb.Item active>\r\n                    {survey.title}\r\n                </Breadcrumb.Item>\r\n            </Breadcrumb>\r\n\r\n            <ButtonToolbar className={'actions float-right'} >\r\n                <Button className=\"btn btn-danger\" onClick={handleShowModal}>{lang['delete']} {lang['survey']}</Button>\r\n                <Link className=\"btn btn-primary\" to={{pathname: `/survey/edit/${survey.id}`, state: {survey: survey}}}>{lang['edit']} {lang['survey']}</Link>\r\n            </ButtonToolbar>\r\n            <h2>{survey.title}</h2>\r\n            <Card>\r\n                <Card.Body>\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\">Email:</dt>\r\n                        <dd className=\"col-sm-9\">{survey.email}</dd>\r\n                    </dl>\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\">{lang['survey-title']}:</dt>\r\n                        <dd className=\"col-sm-9\">{survey.title}</dd>\r\n                    </dl>\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\">{lang['survey-description']}:</dt>\r\n                        <dd className=\"col-sm-9\">{survey.description}</dd>\r\n                    </dl>\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\">{lang['survey-question-total']}:</dt>\r\n                        <dd className=\"col-sm-9\">{survey.questions.length}</dd>\r\n                    </dl>\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\">{lang['survey-response-total']}:</dt>\r\n                        <dd className=\"col-sm-9\">{survey.surveyResponses?.length || 0}</dd>\r\n                    </dl>\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\">{lang['note']}:</dt>\r\n                        <dd className=\"col-sm-9\">{survey.note}</dd>\r\n                    </dl>\r\n                </Card.Body>\r\n            </Card>\r\n            <ConfirmDialog item={survey} message={lang['delete'] + \" \" + lang['survey'] + \" \" + survey.title + \" ?\"} isDisplay={isDisplayConfirmDelete} onCancelAction={handleCloseModal} onOkAction={deleteSurveyHandler} />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Survey;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Route, Link, RouteComponentProps, Switch} from 'react-router-dom'\r\nimport {Breadcrumb, Card, Table, ButtonToolbar, Row, Col, Form, Modal} from 'react-bootstrap';\r\nimport {useSelector} from 'react-redux';\r\nimport {StateInterface} from '../../store/store';\r\nimport {faEdit, faTrashAlt, faShareAlt, faAlignJustify} from '@fortawesome/free-solid-svg-icons';\r\nimport ThreedotsMenu, {MenuIconInterface} from '../utils/ThreedotsMenu';\r\nimport ConfirmDialog from '../utils/ConfirmDialog';\r\nimport SurveyFilter from '../../model/filter/SurveyFilter';\r\nimport SurveyModel from '../../model/SurveyModel';\r\nimport {deleteSurvey, getSurveys} from '../../api/survey/surveyApi';\r\nimport SurveyForm from './SurveyForm';\r\nimport Survey from './Survey';\r\n\r\nconst Surveys: React.FC<RouteComponentProps> = ({match, history}) => {\r\n    const [surveys, setSurveys] = useState<Array<SurveyModel>>([]);\r\n    const [keyword, setKeyword] = useState('');\r\n    const lang = useSelector((state: StateInterface) => state.lang);\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    const [filter, setFilter] = useState<SurveyFilter>({...(new SurveyFilter()), keyword: keyword});\r\n    const [currentSelected, setCurrentSelected] = useState<SurveyModel | null>(null);\r\n    const [isConfirmDelete, setIsConfirmDelete] = useState(false);\r\n    const [isDisplayModalShare, setIsDisplayModalShare] = useState(false);\r\n    const [isDisplayModalResponse, setIsDisplayModalResponse] = useState(false);\r\n\r\n    //menu threedot\r\n    const deleteEntity = (entity: any) => {\r\n        setCurrentSelected(entity);\r\n        setIsConfirmDelete(true);\r\n    }\r\n    const editEntity = (entity: any) => {\r\n        history.push(`/survey/edit/${entity.id}`, {survey: entity});\r\n    }\r\n    const shareSurvey = (entity: any) => {\r\n        setCurrentSelected(entity);\r\n        setIsDisplayModalShare(true);\r\n    }\r\n    const viewSurveyResponse = (entity: any) => {\r\n        setCurrentSelected(entity);\r\n        setIsDisplayModalResponse(true);\r\n    }\r\n\r\n    const menuAction: Array<MenuIconInterface> = [\r\n        {icon: faShareAlt, text: lang['share'], action: shareSurvey},\r\n        {icon: faAlignJustify, text: lang['survey-response'], action: viewSurveyResponse},\r\n        {icon: faEdit, text: lang['edit'], action: editEntity},\r\n        {icon: faTrashAlt, text: lang['delete'], action: deleteEntity}\r\n    ];\r\n    //confirm\r\n    const confirmOk = (item: any) => {\r\n        setIsConfirmDelete(false);\r\n        if (item === null) {\r\n            return;\r\n        }\r\n        (async () => {\r\n            await deleteSurvey(item);\r\n            setSurveys(surveys.filter(i => i.id !== item.id));\r\n            setCurrentSelected(null);\r\n        })();\r\n    }\r\n    const confirmCancel = (item: any) => {\r\n        setCurrentSelected(null);\r\n        setIsConfirmDelete(false);\r\n    }\r\n    const onCloseShareModal = () => {\r\n        setCurrentSelected(null);\r\n        setIsDisplayModalShare(false);\r\n    }\r\n    const onCloseResponseModal = () => {\r\n        setCurrentSelected(null);\r\n        setIsDisplayModalResponse(false);\r\n    }\r\n    const getShareUrl = (): string => {\r\n        if (!currentSelected) {\r\n            return '';\r\n        }\r\n        return process.env.REACT_APP_DOMAIN + '/share-survey/' + (currentSelected?.id || '');\r\n    }\r\n    //state\r\n    useEffect(() => {\r\n        filter.keyword = keyword;\r\n        (async () => {\r\n            const response = await getSurveys(filter);\r\n            setSurveys(response.data)\r\n        })();\r\n    }, [filter, keyword]);\r\n    const SurveyList = <>\r\n        <Breadcrumb>\r\n            <Breadcrumb.Item active>\r\n                <Link to={'/'}>Dashboard</Link>\r\n            </Breadcrumb.Item>\r\n            <Breadcrumb.Item active>\r\n                {lang['survey']}\r\n            </Breadcrumb.Item>\r\n        </Breadcrumb>\r\n        <ButtonToolbar className={'float-right'}>\r\n            <Link className=\"btn btn-primary\" to={'/survey/new'}>{lang['new']} {lang['survey']}</Link>\r\n        </ButtonToolbar>\r\n        <h2>{lang['survey']}</h2>\r\n        <Row>\r\n            <Col xs lg={{span: 4, offset: 8}}>\r\n                <Form.Control type={'text'} placeholder={lang['search']} name={'keyword'} defaultValue={filter.keyword} onChange={(e: any) => setKeyword(e.target.value)} />\r\n            </Col>\r\n        </Row>\r\n        <Card>\r\n            <Table responsive>\r\n                <thead>\r\n                    <tr>\r\n                        {['Email', lang['survey-title'], lang['survey-question-total'], lang['survey-response-total'], lang['action']].map((item, key) => <th key={key}>{item}</th>)}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {surveys.map((item, key) => (\r\n                        <tr key={key}>\r\n                            <td><Link to={`${match.url}/${item.id}`}>{item.email}</Link></td>\r\n                            <td>{item.title}</td>\r\n                            <td>{item.questions.length}</td>\r\n                            <td>{item.surveyResponses?.length || 0}</td>\r\n                            <td><ThreedotsMenu menu={menuAction} entity={item} /></td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        </Card>\r\n        <ConfirmDialog message={lang['delete'] + \" \" + lang['survey'] + \" \" + currentSelected?.title + \" ?\"} isDisplay={isConfirmDelete} onCancelAction={confirmCancel} onOkAction={confirmOk} item={currentSelected} />\r\n        {isDisplayModalShare && <Modal show={isDisplayModalShare} onHide={onCloseShareModal}>\r\n            <Modal.Body>\r\n                <Form.Control type=\"text\" readOnly={true} value={getShareUrl()} />\r\n            </Modal.Body>\r\n        </Modal>}\r\n        {isDisplayModalResponse && <Modal show={isDisplayModalResponse} onHide={onCloseResponseModal}>\r\n            <Modal.Body>\r\n                <div>\r\n                    This feature is not available now !\r\n                </div>\r\n            </Modal.Body>\r\n        </Modal>}\r\n    </>;\r\n\r\n    return (\r\n        <div>\r\n            <Route exact path={match.path} render={() => SurveyList} />\r\n            <Switch>\r\n                <Route path={`${match.path}/new`} component={SurveyForm} />\r\n                <Route path={`${match.path}/edit/:id`} component={SurveyForm} />\r\n                <Route path={`${match.path}/:id`} component={Survey} />\r\n            </Switch>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Surveys;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {RouteComponentProps} from 'react-router';\r\nimport {Card} from 'react-bootstrap';\r\nimport SurveyModel from '../../model/SurveyModel';\r\n\r\nconst ShareSurvey: React.FC<RouteComponentProps<{id: string}>> = ({match}) => {\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    const [survey, setSurvey] = useState(new SurveyModel());\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            // TODO get data from API and render it\r\n        })();\r\n    }, [match]);\r\n\r\n    return (\r\n        <>\r\n            <h2>{survey.title}</h2>\r\n            <Card>\r\n                <Card.Body>\r\n                    TODO: render form from api\r\n                </Card.Body>\r\n            </Card>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ShareSurvey;\r\n","import React from 'react';\r\nimport {BrowserRouter as Router, Route, NavLink, Switch} from 'react-router-dom';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Error from './components/utils/Error';\r\nimport UserLogin from './components/auth/UserLogin';\r\nimport AuthorisedRoute from './components/auth/AuthorisedRoute';\r\nimport Dashboard from './components/dashboard/Dashboard';\r\nimport Users from './components/user/Users';\r\nimport PasswordReset from './components/auth/ResetPassword';\r\nimport {useSelector} from 'react-redux';\r\nimport {StateInterface} from './store/store';\r\nimport TopBar from './components/utils/TopBar';\r\nimport Profile from './components/user/Profile';\r\nimport ChangePassword from './components/user/ChangePassword';\r\nimport Surveys from './components/survey/Surveys';\r\nimport ShareSurvey from './components/survey/ShareSurvey';\r\n\r\nconst AdminApp: React.FC = () => {\r\n    const lang = useSelector((state: StateInterface) => state.lang);\r\n\r\n    return (\r\n        <Router basename={'/'} >\r\n            <div className={'app'}>\r\n                <TopBar />\r\n                <div className={'nav-col'}>\r\n                    <Navbar variant={'dark'} collapseOnSelect expand={'lg'}>\r\n                        <Navbar.Toggle aria-controls={'responsive-navbar-nav'} />\r\n                        <Navbar.Collapse id={'responsive-navbar-nav'}>\r\n                            <Nav variant={'pills'} className={'flex-column'}>\r\n                                <Nav.Link as={NavLink} to={'/dashboard'}>{lang['dashboard']}</Nav.Link>\r\n                                <Nav.Link as={NavLink} to={'/survey'}>{lang['menu-survey']}</Nav.Link>\r\n                                <Nav.Link as={NavLink} to={'/user'}>{lang['menu-user']}</Nav.Link>\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                    </Navbar>\r\n                </div>\r\n                <div className={'app-col'}>\r\n                    <Container>\r\n                        <Error />\r\n                        <Switch>\r\n                            <Route path={'/login'} component={UserLogin} />\r\n                            <Route exact path={'/password-reset/:token'} component={PasswordReset} />\r\n                            <Route exact path={'/share-survey/:id'} component={ShareSurvey} />\r\n                            <AuthorisedRoute path={'/survey'} component={Surveys} />\r\n                            <AuthorisedRoute path={'/user'} component={Users} />\r\n                            <AuthorisedRoute path={'/profile'} component={Profile} />\r\n                            <AuthorisedRoute path={'/change-password'} component={ChangePassword} />\r\n                            <AuthorisedRoute path={'/'} component={Dashboard} />\r\n                        </Switch>\r\n                    </Container>\r\n                </div>\r\n            </div>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default AdminApp;\r\n","import React, {FormEvent, useState, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {ButtonGroup, ButtonToolbar, Form, Card} from 'react-bootstrap';\r\nimport {RouteComponentProps} from 'react-router';\r\nimport {NavLink} from 'react-router-dom';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport client from '../../api/client';\r\nimport {ERROR_GENERAL} from '../../store/types';\r\nimport LoadingButton from '../utils/LoadingButton';\r\nimport {StateInterface} from '../../store/store';\r\n\r\nconst ForgotPasswordRequest: React.FC<RouteComponentProps> = (props) => {\r\n    const lang = useSelector((state: StateInterface) => state.lang);\r\n    const [email, setEmail] = useState('');\r\n    const [resetPasswordSuccess, setResetPasswordSuccess] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        client.logout();\r\n    }, []);\r\n\r\n    const canSubmit = (): boolean => {\r\n        return Boolean(email && !loading);\r\n    };\r\n\r\n    const submit = async (e: FormEvent) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        dispatch({type: ERROR_GENERAL, error: ''});\r\n        try {\r\n            await client.requestPasswordReset(email);\r\n            setResetPasswordSuccess(true);\r\n        } catch (err) {\r\n            dispatch({type: ERROR_GENERAL, error: err.message});\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    return (\r\n        <div className={'login-box'}>\r\n            <h2 className={'text-center'}>{lang['forgot-password']}</h2>\r\n            <Card>\r\n                <Card.Body>\r\n                    <Form onSubmit={submit}>\r\n                        {resetPasswordSuccess\r\n                            ? <p>{(lang['forgot-password-success'] + '').replace('{email}', email)}</p>\r\n                            : <Form.Group>\r\n                                <Form.Label>Email</Form.Label>\r\n                                <Form.Control type={'email'} placeholder={'Email'} onChange={(e: any) => setEmail(e.currentTarget.value)} />\r\n                            </Form.Group>\r\n                        }\r\n                        <ButtonToolbar>\r\n                            <ButtonGroup>\r\n                                {!resetPasswordSuccess && <LoadingButton loading={loading} disabled={!canSubmit()}>{lang['reset']}</LoadingButton>}\r\n                            </ButtonGroup>\r\n                            <ButtonGroup>\r\n                                <Nav.Link as={NavLink} to={'/login'}>{lang['login']}</Nav.Link>\r\n                            </ButtonGroup>\r\n                        </ButtonToolbar>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ForgotPasswordRequest;\r\n","import React from 'react';\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Error from './components/utils/Error';\r\nimport UserLogin from './components/auth/UserLogin';\r\nimport AuthorisedRoute from './components/auth/AuthorisedRoute';\r\nimport PasswordReset from './components/auth/ResetPassword';\r\nimport ForgotPasswordRequest from './components/auth/ForgotPasswordRequest';\r\nimport Dashboard from './components/dashboard/Dashboard';\r\nimport ShareSurvey from './components/survey/ShareSurvey';\r\n\r\nconst PublicApp: React.FC = () => {\r\n    return (\r\n        <Router basename={'/'} >\r\n            <div className={'app'}>\r\n                <div className={'app-col'}>\r\n                    <Container>\r\n                        <Error />\r\n                        <Switch>\r\n                            <Route exact path={'/password-reset/:token'} component={PasswordReset} />\r\n                            <Route exact path={'/forgot-password-request'} component={ForgotPasswordRequest} />\r\n                            <Route exact path={'/share-survey/:id'} component={ShareSurvey} />\r\n                            <Route path={'/login'} component={UserLogin} />\r\n                            <AuthorisedRoute path={'/'} component={Dashboard} />\r\n                        </Switch>\r\n                    </Container>\r\n                </div>\r\n            </div>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default PublicApp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport store from './store/store';\r\nimport './material/scss/index.scss';\r\nimport client from './api/client';\r\nimport AdminApp from './AdminApp';\r\nimport PublicApp from './PublicApp';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        {client.isLoggedIn() && <AdminApp />}\r\n        {!client.isLoggedIn() && <PublicApp />}\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}